[A] format {

    [A] |OPCODE(13)|MOD(04)|RA(05)|RB(05)|RC(05)| length: 4B

    for scalar computational [R-R-R] instructions:

        MOD(04): "ttmx"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('x' signifies unused bit)

    for vector computational [R-R-R] instructions:

        MOD(04): "ttmv"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('v' is vector mode: 0 vector-vector, 1 vector-scalar)

    vector gather & scatter instructions:

        MOD(04): "ttmx"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('x' signifies unused bit)

    atomic CAS instructions:

        MOD(04): "ttmf"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('f' is function to perform: 0 ==, 1 <= (always unsigned))
}
______________________________________________________________________________________________________________________________________________________________________

[B] format {

    [B]   |OPCODE(10)|MOD(02)|RA(05)|RB(05)|IMM(10)| length: 4B
    [B.l] |OPCODE(10)|MOD(03)|RA(05)|RB(05)|IMM(25)| length: 6B

    computational [R-R-I] instructions:

        MOD(02): "tt"
        MOD(03): "ttm"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is mask: 0 unmasked, 1 masked)
}
______________________________________________________________________________________________________________________________________________________________________

[C] format {

    [C] |OPCODE(16)|MOD(06)|RA(05)|RB(05)| length: 4B

    computational [R-R] instructions:
    
        MOD(06): "ttmxxx"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('x' signifies unused bit)

    casts & conversion instructions:
    
        MOD(06): "ttttms"

        ('tttt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('s' is sign: 0 signed, 1 unsigned)

    move & swap instructions:

        MOD(06): "ttmnnn"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('nnn' is number of regs acted)

    compare mask setting instructions:
    
        MOD(06):

            ttms00 -> EQ
            ttms01 -> NE
            ttms10 -> LT
            ttms11 -> LE

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('s' is sign: 0 signed, 1 unsigned)
}
______________________________________________________________________________________________________________________________________________________________________

[D] format {

    [D]   |OPCODE(07)|MOD(03)|RA(05)|RB(05)|IMM(12)| length: 4B
    [D.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|IMM(26)| length: 6B

    scalar load & store instructions:

        MOD(03): "ttm"
        MOD(05): "ttmuu"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-inc)

    vector load & store instructions:

        MOD(03): "max"
        MOD(05): "mauux"

        ('m' is mask: 0 unmasked, 1 masked)
        ('a' is addressing mode: 0 standard, 1 striding)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-inc)
        ('x' signifies unused bit)
}
______________________________________________________________________________________________________________________________________________________________________

[E] format {

    [E]   |OPCODE(07)|MOD(03)|RA(05)|RB(05)|RC(05)|IMM(07)| length: 4B
    [E.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|IMM(21)| length: 6B

    scalar load & store instructions:

        MOD(03): "ttm"
        MOD(05): "ttmuu"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-inc)

    vector load & store instructions:

        MOD(03): "max"
        MOD(05): "mauux"

        ('m' is mask: 0 unmasked, 1 masked)
        ('a' is addressing mode: 0 standard, 1 striding)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-inc)
        ('x' signifies unused bit)
}
______________________________________________________________________________________________________________________________________________________________________

[F] format {

    [F] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|RD(05)| length: 4B

    scalar load & store instructions:

        MOD(05): "ttmuu"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-inc)

    vector load & store instructions:

        MOD(05): "mauux"

        ('m' is mask: 0 unmasked, 1 masked)
        ('a' is addressing mode: 0 standard, 1 striding)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-inc)
        ('x' signifies unused bit)
}
______________________________________________________________________________________________________________________________________________________________________

[G] format {

   [G]   |OPCODE(08)|MOD(03)|RA(05)|IMM(16)| length: 4B
   [G.l] |OPCODE(08)|MOD(03)|RA(05)|IMM(32)| length: 6B

    block load & store instructions:
    
        MOD(03): "ffm"

        ('ff' is file selector: 00 SGPRs, 01 SPRs, 10 VGPRs, 11 VFLG)
        ('m' is mask: 0 unmasked, 1 masked)

    flag branches:

        MOD(03): "fff"

        ('fff' is the flag specifier)

    test branches:

        MOD(03): "ffs"

        ('ff' is condition: 00 EQZ, 01 NEZ, 10 LTZ, 11 LEZ)
        ('s' is sign: 0 signed, 1 unsigned)
}
______________________________________________________________________________________________________________________________________________________________________

[H] format {
    
    [H]   |OPCODE(08)|MOD(02)|RA(05)|RB(05)|IMM(12)| length: 4B
    [H.l] |OPCODE(08)|MOD(02)|RA(05)|RB(05)|IMM(28)| length: 6B

    conditional compare branches:

        MOD(02): "tt"

        ('tt' is data type length: 8, 16, 32, 64)
}
______________________________________________________________________________________________________________________________________________________________________

[J] format {
    
    [J]   |OPCODE(07)|RA(05)|IMM(20)| length: 4B
    [J.l] |OPCODE(07)|RA(05)|IMM(36)| length: 6B

    direct function calls & jumps
}
______________________________________________________________________________________________________________________________________________________________________

[K] format {
    
    [K]   |OPCODE(07)|RA(05)|RB(05)|IMM(15)| length: 4B
    [K.1] |OPCODE(07)|RA(05)|RB(05)|IMM(31)| length: 6B

    indirect function calls & jumps
}
______________________________________________________________________________________________________________________________________________________________________

[M] format {
    
    [M] |OPCODE(08)|MOD(02)|RD/RS1(03)|RS2(03)| length: 2B

    compressed computational [R-R] instructions:

        MOD(02): "tt"

        ('tt' is data type length: 8, 16, 32, 64)
}
______________________________________________________________________________________________________________________________________________________________________

[N] format {
    
    [N] |OPCODE(07)|RA(03)|IMM(06)| length: 2B

    compressed computational [R-I] & test branch instructions
}
______________________________________________________________________________________________________________________________________________________________________

[O] format {
    
    [O] |OPCODE(07)|IMM(09)| length: 2B

    compressed direct function calls, jumps & system instructions
}
______________________________________________________________________________________________________________________________________________________________________

[P] format {
    
    [P] |OPCODE(11)|RA(05)| length: 2B

    system instructions
}
______________________________________________________________________________________________________________________________________________________________________


[A]   |OPCODE(13)|MOD(04)|RA(05)|RB(05)|RC(05)|                 r-r-r       120

[B]   |OPCODE(10)|MOD(02)|RA(05)|RB(05)|IMM(10)|                r-r-i       120
[B.1] |OPCODE(10)|MOD(03)|RA(05)|RB(05)|IMM(25)|                r-r-i       120

[C]   |OPCODE(16)|MOD(06)|RA(05)|RB(05)|                        r-r         64

[D]   |OPCODE(07)|MOD(03)|RA(05)|RB(05)|IMM(12)|                r-r-i       4
[D.1] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|IMM(26)|                r-r-i       4

[H]   |OPCODE(08)|MOD(02)|RA(05)|RB(05)|IMM(12)|                r-r-i       12
[H.1] |OPCODE(08)|MOD(02)|RA(05)|RB(05)|IMM(28)|                r-r-i       12

[E]   |OPCODE(07)|MOD(03)|RA(05)|RB(05)|RC(05)|IMM(07)|         r-r-r-i     4
[E.1] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|IMM(21)|         r-r-r-i     4

[K]   |OPCODE(07)|RA(05)|RB(05)|IMM(15)|                        r-r-i       1
[K.1] |OPCODE(07)|RA(05)|RB(05)|IMM(31)|                        r-r-i       1

[F]   |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|RD(05)|          r-r-r-r     4

[G]   |OPCODE(08)|MOD(03)|RA(05)|IMM(16)|                       r-i         8
[G.1] |OPCODE(08)|MOD(03)|RA(05)|IMM(32)|                       r-i         8

[J]   |OPCODE(07)|RA(05)|IMM(20)|                               r-i         1
[J.1] |OPCODE(07)|RA(05)|IMM(36)|                               r-i         1


[M] |OPCODE(08)|MOD(02)|RD/RS1(03)|RS2(03)|
[N] |OPCODE(07)|RA(03) |IMM(06)|                                            16
[O] |OPCODE(07)|IMM(09)|                                                     5
[P] |OPCODE(11)|RA(05) |                                                     9



0000000 xxxxxxxxx -> 0111011 xxxxxxxxx         60; formats: (D) (D.1) (E) (E.1) (F) (J) (J.1) (K) (K.1) (N) (O)
0111100 0xxxxxxxx -> 1011011 1xxxxxxxx         64; formats: (G) (G.1) (H) (H.1) (M)
1011100 000xxxxxx -> 1111011 111xxxxxx        256; formats: (B) (B.1)
1111100 0000xxxxx -> 1111101 0111xxxxx         24; formats: (P)
1111101 100000xxx -> 1111110 111111xxx        128; formats: (A)
1111111 000000000 -> 1111111 001111111        128; formats: (C)

384







ADD

MBADD

    tt