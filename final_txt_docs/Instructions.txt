This file is concerned with the list of instructions
______________________________________________________________________________________________________________________________________________________________________

...
______________________________________________________________________________________________________________________________________________________________________

INSTRUCTION LIST:

Computational { [190]

    scalar {

        integer {

            core { (25)

                1st module: BISC (basic integer scalar computational)

                [A] (ADD)----Addition----------------------------------------(?????)----OPCODE:000000000000
                [A] (SUB)----Subtraction-------------------------------------(?????)----OPCODE:000000000000
                [A] (LSH)----Left Shift--------------------------------------(?????)----OPCODE:000000000000
                [A] (RSH)----Right Shift-------------------------------------(?????)----OPCODE:000000000000
                [A] (LRT)----Left Rotate-------------------------------------(?????)----OPCODE:000000000000
                [A] (RRT)----Right Rotate------------------------------------(?????)----OPCODE:000000000000
                [A] (AND)----Bitwise AND-------------------------------------(?????)----OPCODE:000000000000
                [A] (NAND)---Bitwise NAND------------------------------------(?????)----OPCODE:000000000000
                [A] (OR)-----Bitwise OR--------------------------------------(?????)----OPCODE:000000000000
                [A] (NOR)----Bitwise NOR-------------------------------------(?????)----OPCODE:000000000000
                [A] (XOR)----Bitwise XOR-------------------------------------(?????)----OPCODE:000000000000
                [A] (XNOR)---Bitwise XNOR------------------------------------(?????)----OPCODE:000000000000

                [B] (IADD)---Immediate Addition------------------------------(?????)----OPCODE:000000000
                [B] (ISUB)---Immediate Subtraction---------------------------(?????)----OPCODE:000000000
                [B] (ILSH)---Immediate Left Shift----------------------------(?????)----OPCODE:000000000
                [B] (IRSH)---Immediate Right Shift---------------------------(?????)----OPCODE:000000000
                [B] (ILRT)---Immediate Left Rotate---------------------------(?????)----OPCODE:000000000
                [B] (IRRT)---Immediate Right Rotate--------------------------(?????)----OPCODE:000000000
                [B] (IAND)---Immediate Bitwise AND---------------------------(?????)----OPCODE:000000000
                [B] (INAND)--Immediate Bitwise NAND--------------------------(?????)----OPCODE:000000000
                [B] (IOR)----Immediate Bitwise OR----------------------------(?????)----OPCODE:000000000
                [B] (INOR)---Immediate Bitwise NOR---------------------------(?????)----OPCODE:000000000
                [B] (IXOR)---Immediate Bitwise XOR---------------------------(?????)----OPCODE:000000000
                [B] (IXNOR)--Immediate Bitwise XNOR--------------------------(?????)----OPCODE:000000000
                [B] (IIBF)---Immediate Insert Bit Field----------------------(?????)----OPCODE:000000000

                [C] (SIIC)-Scalar Integer-Integer Cast-----------------------(?????)----OPCODE:0000000000000000
            }

            advanced { (38)

                2nd module: AISC (advanced integer scalar computational)

                [A] (MUL)----Multiplication----------------------------------(?????)----OPCODE:000000000000
                [A] (MAC)----Multiply Accumulate-----------------------------(?????)----OPCODE:000000000000
                [A] (DIV)----Division----------------------------------------(?????)----OPCODE:000000000000
                [A] (REM)----Remainder---------------------------------------(?????)----OPCODE:000000000000
                [A] (ADDC)---Addition Carry----------------------------------(?????)----OPCODE:000000000000
                [A] (SUBC)---Subtraction Carry-------------------------------(?????)----OPCODE:000000000000
                [A] (LSHC)---Left Shift Carry--------------------------------(?????)----OPCODE:000000000000
                [A] (RSHC)---Right Shift Carry-------------------------------(?????)----OPCODE:000000000000
                [A] (HMUL)---High Multiplication-----------------------------(?????)----OPCODE:000000000000
                [A] (HMAC)---High Multiply Accumulate------------------------(?????)----OPCODE:000000000000
                [A] (HLSH)---High Left Shift---------------------------------(?????)----OPCODE:000000000000
                [A] (HRSH)---High Right Shift--------------------------------(?????)----OPCODE:000000000000
                [A] (SWP)----Bit Swap----------------------------------------(?????)----OPCODE:000000000000
                [A] (IMP)----Bitwise IMP-------------------------------------(?????)----OPCODE:000000000000
                [A] (NIMP)---Bitwise NIMP------------------------------------(?????)----OPCODE:000000000000
                [A] (CLMUL)--Carry-less Multiplication-----------------------(?????)----OPCODE:000000000000

                [B] (IMUL)---Immediate Multiplication------------------------(?????)----OPCODE:000000000
                [B] (IMAC)---Immediate Multiply Accumulate-------------------(?????)----OPCODE:000000000
                [B] (IDIV)---Immediate Division------------------------------(?????)----OPCODE:000000000
                [B] (IREM)---Immediate Remainder-----------------------------(?????)----OPCODE:000000000
                [B] (HIMUL)--Immediate High Multiplication-------------------(?????)----OPCODE:000000000
                [B] (IHMAC)--Immediate High Multiply Accumulate--------------(?????)----OPCODE:000000000
                [B] (IHLSH)--Immediate High Left Shift-----------------------(?????)----OPCODE:000000000
                [B] (IHRSH)--Immediate High Right Shift----------------------(?????)----OPCODE:000000000
                [B] (IADDC)--Immediate Addition Carry------------------------(?????)----OPCODE:000000000
            	[B] (ISUBC)--Immediate Subtraction Carry---------------------(?????)----OPCODE:000000000
            	[B] (ILSHC)--Immediate Left Shift Carry----------------------(?????)----OPCODE:000000000
            	[B] (IRSHC)--Immediate Right Shift Carry---------------------(?????)----OPCODE:000000000
                [B] (ISWP)---Immediate Bit Swap------------------------------(?????)----OPCODE:000000000
                [B] (IIMP)---Immediate Bitwise IMP---------------------------(?????)----OPCODE:000000000
                [B] (INIMP)--Immediate Bitwise NIMP--------------------------(?????)----OPCODE:000000000
                [B] (ICLMUL)-Immediate Carry-less Multiplication-------------(?????)----OPCODE:000000000

                [C] (CTO)----Count Ones--------------------------------------(?????)----OPCODE:0000000000000000
            	[C] (CTLO)---Count Leading Ones------------------------------(?????)----OPCODE:0000000000000000
            	[C] (CTTO)---Count Trailing Ones-----------------------------(?????)----OPCODE:0000000000000000
            	[C] (CTZ)----Count Zeros-------------------------------------(?????)----OPCODE:0000000000000000
            	[C] (CTLZ)---Count Leading Zeros-----------------------------(?????)----OPCODE:0000000000000000
            	[C] (CTTZ)---Count Trailing Zeros----------------------------(?????)----OPCODE:0000000000000000
            }
        }

        floating point {

            core { (8)

                3rd module: BFSC (basic floating-point scalar computational)

                [A] (FADD)---FP. Addition------------------------------------(?????)----OPCODE:000000000000
                [A] (FSUB)---FP. Subtraction---------------------------------(?????)----OPCODE:000000000000
                [A] (FMUL)---FP. Multiplication------------------------------(?????)----OPCODE:000000000000
                [A] (FDIV)---FP. Division------------------------------------(?????)----OPCODE:000000000000

                [B] (IFADD)--Immediate FP. Addition--------------------------(?????)----OPCODE:000000000
                [B] (IFSUB)--Immediate FP. Subtraction-----------------------(?????)----OPCODE:000000000
                [B] (IFMUL)--Immediate FP. Multiplication--------------------(?????)----OPCODE:000000000
                [B] (IFDIV)--Immediate FP. Division--------------------------(?????)----OPCODE:000000000

                [C] (SFFC)-Scalar FP-FP Cast---------------------------------(?????)----OPCODE:0000000000000000
            }

            advanced { (10)

                4th module: AFSC (advanced floating-point scalar computational)

                [A] (FMAC)---FP. Multiply Accumulate-------------------------(?????)----OPCODE:000000000000
                [A] (FPOW)---FP. Power---------------------------------------(?????)----OPCODE:000000000000
                [A] (FPOW)---FP. Remainder-----------------------------------(?????)----OPCODE:000000000000

                [B] (IFMAC)--Immediate FP. Multiply Accumulate---------------(?????)----OPCODE:000000000
                [B] (IFPOW)--Immediate FP. Power-----------------------------(?????)----OPCODE:000000000
                [B] (IFPOW)--Immediate FP. Remainder-------------------------(?????)----OPCODE:000000000

                [C] (SIN)----Sin---------------------------------------------(?????)----OPCODE:0000000000000000
                [C] (COS)----Cos---------------------------------------------(?????)----OPCODE:0000000000000000
                [C] (ASIN)---Arcsin------------------------------------------(?????)----OPCODE:0000000000000000
                [C] (ACOS)---Arccos------------------------------------------(?????)----OPCODE:0000000000000000
            }
        }
    }

    vector {

        integer {

            core { (25)

                5th module: BIVC (basic integer vector computational)

                [A] (VADD)--Vector Addition----------------------------------(?????)----OPCODE:000000000000
                [A] (VSUB)--Vector Subtraction-------------------------------(?????)----OPCODE:000000000000
                [A] (VLSH)--Vector Left Shift--------------------------------(?????)----OPCODE:000000000000
                [A] (VRSH)--Vector Right Shift-------------------------------(?????)----OPCODE:000000000000
                [A] (VLRT)----Vector Left Rotate-----------------------------(?????)----OPCODE:000000000000
                [A] (VRRT)----Vector Right Rotate----------------------------(?????)----OPCODE:000000000000
                [A] (VAND)----Vector Bitwise AND-----------------------------(?????)----OPCODE:000000000000
                [A] (VNAND)---Vector Bitwise NAND----------------------------(?????)----OPCODE:000000000000
                [A] (VOR)-----Vector Bitwise OR------------------------------(?????)----OPCODE:000000000000
                [A] (VNOR)----Vector Bitwise NOR-----------------------------(?????)----OPCODE:000000000000
                [A] (VXOR)----Vector Bitwise XOR-----------------------------(?????)----OPCODE:000000000000
                [A] (VXNOR)---Vector Bitwise XNOR----------------------------(?????)----OPCODE:000000000000

                [B] (VIADD)--Vector Immediate Addition-----------------------(?????)----OPCODE:000000000
                [B] (VISUB)--Vector Immediate Subtraction--------------------(?????)----OPCODE:000000000
                [B] (VILSH)--Vector Immediate Left Shift---------------------(?????)----OPCODE:000000000
                [B] (VIRSH)--Vector Immediate Right Shift--------------------(?????)----OPCODE:000000000
                [B] (VILRT)---Vector Immediate Left Rotate-------------------(?????)----OPCODE:000000000
                [B] (VIRRT)---Vector Immediate Right Rotate------------------(?????)----OPCODE:000000000
                [B] (VIAND)---Vector Immediate Bitwise AND-------------------(?????)----OPCODE:000000000
                [B] (VINAND)--Vector Immediate Bitwise NAND------------------(?????)----OPCODE:000000000
                [B] (VIOR)----Vector Immediate Bitwise OR--------------------(?????)----OPCODE:000000000
                [B] (VINOR)---Vector Immediate Bitwise NOR-------------------(?????)----OPCODE:000000000
                [B] (VIXOR)---Vector Immediate Bitwise XOR-------------------(?????)----OPCODE:000000000
                [B] (VIXNOR)--Vector Immediate Bitwise XNOR------------------(?????)----OPCODE:000000000
                [B] (VIIBF)---Vector Immediate Insert Bit Field--------------(?????)----OPCODE:000000000

                [C] (VIIC)-Vector Integer-Integer Cast-----------------------(?????)----OPCODE:0000000000000000
            }

            advanced { (51)

                6th module: AIVC (advanced integer vector computational)

                [A] (VMUL)---Vector Multiplication---------------------------(?????)----OPCODE:000000000000
                [A] (VMAC)---Vector Multiply Accumulate----------------------(?????)----OPCODE:000000000000
                [A] (VDIV)---Vector Division---------------------------------(?????)----OPCODE:000000000000
                [A] (VREM)---Vector Remainder--------------------------------(?????)----OPCODE:000000000000
                [A] (VADDC)--Vector Addition Carry---------------------------(?????)----OPCODE:000000000000
                [A] (VSUBC)--Vector Subtraction Carry------------------------(?????)----OPCODE:000000000000
                [A] (VLSHC)--Vector Left Shift Carry-------------------------(?????)----OPCODE:000000000000
                [A] (VRSHC)--Vector Right Shift Carry------------------------(?????)----OPCODE:000000000000
                [A] (VHMUL)--Vector High Multiplication----------------------(?????)----OPCODE:000000000000
                [A] (VHMAC)--Vector High Multiply Accumulate-----------------(?????)----OPCODE:000000000000
                [A] (VHLSH)--Vector High Left Shift--------------------------(?????)----OPCODE:000000000000
                [A] (VHRSH)--Vector High Right Shift-------------------------(?????)----OPCODE:000000000000
                [A] (VSWP)----Vector Bit Swap--------------------------------(?????)----OPCODE:000000000000
                [A] (VIMP)----Vector Bitwise IMP-----------------------------(?????)----OPCODE:000000000000
                [A] (VNIMP)---Vector Bitwise NIMP----------------------------(?????)----OPCODE:000000000000
                [A] (VCLMUL)--Vector Carry-less Multiplication---------------(?????)----OPCODE:000000000000

                [B] (VIMUL)--Vector Immediate Multiplication-----------------(?????)----OPCODE:000000000
                [B] (VIMAC)--Vector Immediate Multiply Accumulate------------(?????)----OPCODE:000000000
                [B] (VIDIV)--Vector Immediate Division-----------------------(?????)----OPCODE:000000000
                [B] (VIREM)--Vector Immediate Remainder----------------------(?????)----OPCODE:000000000
                [B] (VHIMUL)-Vector Immediate High Multiplication------------(?????)----OPCODE:000000000
                [B] (VIHMAC)-Vector Immediate High Multiply Accumulate-------(?????)----OPCODE:000000000
                [B] (VIHLSH)-Vector Immediate High Left Shift----------------(?????)----OPCODE:000000000
                [B] (VIHRSH)-Vector Immediate High Right Shift---------------(?????)----OPCODE:000000000
                [B] (VIADDC)-Vector Immediate Addition Carry-----------------(?????)----OPCODE:000000000
                [B] (VISUBC)-Vector Immediate Subtraction Carry--------------(?????)----OPCODE:000000000
                [B] (VILSHC)-Vector Immediate Left Shift Carry---------------(?????)----OPCODE:000000000
                [B] (VIRSHC)-Vector Immediate Right Shift Carry--------------(?????)----OPCODE:000000000
                [B] (VISWP)---Vector Immediate Bit Swap----------------------(?????)----OPCODE:000000000
                [B] (VIIMP)---Vector Immediate Bitwise IMP-------------------(?????)----OPCODE:000000000
                [B] (VINIMP)--Vector Immediate Bitwise NIMP------------------(?????)----OPCODE:000000000
                [B] (VICLMUL)-Vector Immediate Carry-less Multiplication-----(?????)----OPCODE:000000000

                [C] (RADD)----Reduced Addition-------------------------------(?????)----OPCODE:0000000000000000
                [C] (RSUB)----Reduced Subtraction----------------------------(?????)----OPCODE:0000000000000000
                [C] (RMUL)----Reduced Multiplication-------------------------(?????)----OPCODE:0000000000000000
                [C] (RMAC)----Reduced Multiply Accumulate--------------------(?????)----OPCODE:0000000000000000
                [C] (RDIV)----Reduced Division-------------------------------(?????)----OPCODE:0000000000000000
                [C] (RAND)----Reduced Bitwise AND----------------------------(?????)----OPCODE:0000000000000000
                [C] (RNAND)---Reduced Bitwise NAND---------------------------(?????)----OPCODE:0000000000000000
                [C] (ROR)-----Reduced Bitwise OR-----------------------------(?????)----OPCODE:0000000000000000
                [C] (RNOR)----Reduced Bitwise NOR----------------------------(?????)----OPCODE:0000000000000000
                [C] (RXOR)----Reduced Bitwise XOR----------------------------(?????)----OPCODE:0000000000000000
                [C] (RXNOR)---Reduced Bitwise XNOR---------------------------(?????)----OPCODE:0000000000000000
                [C] (RIMP)----Reduced Bitwise IMP----------------------------(?????)----OPCODE:0000000000000000
                [C] (RNIMP)---Reduced Bitwise NIMP---------------------------(?????)----OPCODE:0000000000000000
                [C] (VCTO)----Vector Count Ones------------------------------(?????)----OPCODE:0000000000000000
                [C] (VCTLO)---Vector Count Leading Ones----------------------(?????)----OPCODE:0000000000000000
                [C] (VCTTO)---Vector Count Trailing Ones---------------------(?????)----OPCODE:0000000000000000
                [C] (VCTZ)----Vector Count Zeros-----------------------------(?????)----OPCODE:0000000000000000
                [C] (VCTLZ)---Vector Count Leading Zeros---------------------(?????)----OPCODE:0000000000000000
                [C] (VCTTZ)---Vector Count Trailing Zeros--------------------(?????)----OPCODE:0000000000000000
            }
        }

        floating point {

            core { (8)

                7th module: BFVC (basic floating-point vector computational)

                [A] (VFADD)--Vector FP. Addition-----------------------------(?????)----OPCODE:000000000000
                [A] (VFSUB)--Vector FP. Subtraction--------------------------(?????)----OPCODE:000000000000
                [A] (VFMUL)--Vector FP. Multiplication-----------------------(?????)----OPCODE:000000000000
                [A] (VFDIV)--Vector FP. Division-----------------------------(?????)----OPCODE:000000000000

                [B] (VIFADD)-Vector Immediate FP. Addition-------------------(?????)----OPCODE:000000000
                [B] (VIFSUB)-Vector Immediate FP. Subtraction----------------(?????)----OPCODE:000000000
                [B] (VIFMUL)-Vector Immediate FP. Multiplication-------------(?????)----OPCODE:000000000
                [B] (VIFDIV)-Vector Immediate FP. Division-------------------(?????)----OPCODE:000000000

                [C] (VFFC)-Vector FP-FP Cast---------------------------------(?????)----OPCODE:0000000000000000
            }

            advanced { (17)

                8th module: AFVC (advanced floating-point vector computational)

                [A] (VFMAC)---Vector FP. Multiply Accumulate-----------------(?????)----OPCODE:000000000000
                [A] (VFPOW)---Vector FP. Power-------------------------------(?????)----OPCODE:000000000000
                [A] (VFREM)---Vector FP. Remainder---------------------------(?????)----OPCODE:000000000000

                [B] (VIFMAC)--Vector Immediate FP. Multiply Accumulate-------(?????)----OPCODE:000000000
                [B] (VIFPOW)--Vector Immediate FP. Power---------------------(?????)----OPCODE:000000000
                [B] (VIFREM)--Vector Immediate FP. Remainder-----------------(?????)----OPCODE:000000000

                [C] (VSIN)----Vector Sin-------------------------------------(?????)----OPCODE:0000000000000000
                [C] (VCOS)----Vector Cos-------------------------------------(?????)----OPCODE:0000000000000000
                [C] (VASIN)---Vector Arcsin----------------------------------(?????)----OPCODE:0000000000000000
                [C] (VACOS)---Vector Arccos----------------------------------(?????)----OPCODE:0000000000000000
                [C] (VRFADD)--Vector Reduced FP. Addition--------------------(?????)----OPCODE:0000000000000000
                [C] (VRFSUB)--Vector Reduced FP. Subtraction-----------------(?????)----OPCODE:0000000000000000
                [C] (VRFBSUB)-Vector Reduced FP. Back Subtraction------------(?????)----OPCODE:0000000000000000
                [C] (VRFMUL)--Vector Reduced FP. Multiplication--------------(?????)----OPCODE:0000000000000000
                [C] (VRFMAC)--Vector Reduced FP. Multiply Accumulate---------(?????)----OPCODE:0000000000000000
                [C] (VRFDIV)--Vector Reduced FP. Division--------------------(?????)----OPCODE:0000000000000000
                [C] (VRFBDIV)-Vector Reduced FP. Back Division---------------(?????)----OPCODE:0000000000000000
            }
        }
    }

    mixed casts { (8)

        TODO: assign to proper module

        [C] (SIFC)-Scalar Integer-FP Cast------------------------------------(?????)----OPCODE:0000000000000000
        [C] (SFIC)-Scalar FP-Integer Cast------------------------------------(?????)----OPCODE:0000000000000000
        [C] (VIFC)-Vector Integer-FP Cast------------------------------------(?????)----OPCODE:0000000000000000
        [C] (VFIC)-Vector FP-Integer Cast------------------------------------(?????)----OPCODE:0000000000000000
    }
}
______________________________________________________________________________________________________________________________________________________________________


Data Transfer { [17]

    scalar {

        core { (3)

            module: 0 (basic memory)

            [D] (MLD)---Memory Load------------------------------------------(?????)----OPCODE:000000
            [D] (MST)---Memory Store-----------------------------------------(?????)----OPCODE:000000
        }

        advanced { (4)

            modile: 1 (advanced memory)

            [E] (IMLD)--Indexed Memory Load----------------------------------(?????)----OPCODE:000000
            [E] (IMST)--Indexed Memory Store---------------------------------(?????)----OPCODE:000000
            [F] (RIMLD)-Register Indexed Memory Load-------------------------(?????)----OPCODE:000000000
            [F] (RIMST)-Register Indexed Memory Store------------------------(?????)----OPCODE:000000000
        }
    }

    vector {

        core { (2)

            [D] (VMLD)---Vector Memory Load----------------------------------(?????)----OPCODE:000000
            [D] (VMST)---Vector Memory Store---------------------------------(?????)----OPCODE:000000
        }

        advanced { (4)

            [E] (VIMLD)--Vector Indexed Memory Load--------------------------(?????)----OPCODE:000000
            [E] (VIMST)--Vector Indexed Memory Store-------------------------(?????)----OPCODE:000000
            [F] (VRIMLD)-Vector Register Indexed Memory Load-----------------(?????)----OPCODE:000000000
            [F] (VRIMST)-Vector Register Indexed Memory Store----------------(?????)----OPCODE:000000000
            [A] (VGAT)---Vector Gather---------------------------------------(?????)----OPCODE:0000000000000
            [A] (VSCA)---Vector Scatter--------------------------------------(?????)----OPCODE:0000000000000
        }
    }

    atomic { (2)

        [A] (LL)-Load Linked-------------------------------------------------(?????)----OPCODE:000000000000
        [A] (SC)-Store Conditional-------------------------------------------(?????)----OPCODE:000000000000
        // CAS maybe
    }

    block { (2)

        [G] (BLD)-Block Load-------------------------------------------------(?????)----OPCODE:0000000
        [G] (BST)-Block Store------------------------------------------------(?????)----OPCODE:0000000
    }



    [C] (MOV)----Move
    [C] (MOVTS)--Move To Special
    [C] (MOVFS)--Move From Special
    [C] (MOVTF)--Move To Flags
    [C] (MOVFF)--Move From Flags

    [C] (VMOV)---Vector Move
    [C] (MOVTV)--Move To Vector
    [C] (MOVFV)--Move From Vector
    [C] (VMOVTF)-Vector Move To Flags
    [C] (VMOVFF)-Vector Move From Flags

    //same for swaps...
}
______________________________________________________________________________________________________________________________________________________________________

Control transfer { [25]

    integer {

        core { (8)

            [H] (BEQ)---Branch If Equal--------------------------------------OPCODE:0000000
            [H] (BNE)---Branch If Not Equal----------------------------------OPCODE:0000000
            [H] (BLT)---Branch If Less Than----------------------------------OPCODE:0000000
            [H] (BLE)---Branch If Less Equal---------------------------------OPCODE:0000000
            [H] (UBLT)--Unsigned Branch If Less Than-------------------------OPCODE:0000000
            [H] (UBLE)--Unsigned Branch If Less Equal------------------------OPCODE:0000000

            [J] (CAL)---Function Call----------------------------------------OPCODE
            [P] (RET)---Function Return--------------------------------------OPCODE
        }

        advanced { (6)

            [C] (SIMSK)-Scalar Integer Mask Set------------------------------OPCODE:
            
            [I] (BTST)--Branch If Test---------------------------------------OPCODE:
            [I] (UBTST)-Unsigned Branch If Test------------------------------OPCODE:
            
            [G] (BAF)--Branch If Arithmetic Flag-----------------------------OPCODE:
            [G] (BSF)--Branch If Arithmetic Flag2----------------------------OPCODE:

            [K] (RCAL)-Register Function Call--------------------------------OPCODE:
        }
    }

    floating point {

        core { (6)

            [H] (FBEQ)--FP. Branch If Equal----------------------------------(?????)----OPCODE:0000000
            [H] (FBNE)--FP. Branch If Not Equal------------------------------(?????)----OPCODE:0000000
            [H] (FBLT)--FP. Branch If Less Than------------------------------(?????)----OPCODE:0000000
            [H] (FBLE)--FP. Branch If Less Equal-----------------------------(?????)----OPCODE:0000000
            [H] (UFBLT)-Unsigned FP. Branch If Less Than---------------------(?????)----OPCODE:0000000
            [H] (UFBLE)-Unsigned FP. Branch If Less Equal--------------------(?????)----OPCODE:0000000
        }

        advanced { (3)

            [C] (SFMSK)-Scalar FP. Mask Set----------------------------------(?????)
            
            [I] (FBTST)--FP. Branch If Test----------------------------------(?????)
            [I] (UFBTST)-Unsigned FP. Branch If Test-------------------------(?????)
        }
    }


    vector {

        core { (2)

            [C] (VIMSK)-Vector Integer Mask Set------------------------------(?????)
            [C] (VFMSK)-Vector FP. Mask Set----------------------------------(?????)
        }

        advanced { (?)

            TODO: add masks settings on flags and tests
        }
    }
}
______________________________________________________________________________________________________________________________________________________________________

System { [21]

    core { (2)

        [P] (NOP)---No Operation---------------------------------------------(?????)
      * [P] (CACOP)-Cache Operation------------------------------------------(?????)
    }

    advanced { (15)

        [P] (UERET)-User Event Return----------------------------------------(?????)
      * [P] (SERET)-Supervisor Event Return----------------------------------(?????)
      * [P] (MMUOP)-MMU Operation--------------------------------------------(?????)
        [O] (SYSCL)-System Call----------------------------------------------(?????)
        [?] (WINT)--Wait For Interrupt---------------------------------------(?????)
        [?] (BPTRG)-Breakpoint Trigger---------------------------------------(?????)
        [P] (FNCL)--Fence Loads----------------------------------------------(?????)
        [P] (FNCS)--Fence Stores---------------------------------------------(?????)
        [P] (FNCLS)-Fence Loads and Stores-----------------------------------(?????)

      * [P] (SDMP)--State Dump-----------------------------------------------(?????)
      * [P] (SRST)--State Restore--------------------------------------------(?????)
    }

    transactional memory {

        [P] (TBEG)--Transaction Begin----------------------------------------(?????)
        [P] (TEND)--Transaction End------------------------------------------(?????)
        [P] (TABT)--Transaction Abort----------------------------------------(?????)
        [P] (TCHK)--Transaction Check----------------------------------------(?????)
    }
}
______________________________________________________________________________________________________________________________________________________________________

Compressed { [21]

    [M] (CADD)   Compressed Addition-----------------------------------------(?????)
    [M] (CSUB)   Compressed Subtraction--------------------------------------(?????)
    [M] (CSUB)   Compressed Multiplication-----------------------------------(?????)
    [M] (CSUB)   Compressed Division-----------------------------------------(?????)
    [M] (CLSH)   Compressed Left Shift---------------------------------------(?????)
    [M] (CRSH)   Compressed Right Shift--------------------------------------(?????)
    [M] (CFADD)  Compressed FP. Addition-------------------------------------(?????)
    [M] (CFSUB)  Compressed FP. Subtraction----------------------------------(?????)
    [M] (CFMUL)  Compressed FP. Multiplication-------------------------------(?????)
    [M] (CFDIV)  Compressed FP. Division-------------------------------------(?????)

    [Q] (CMOV)   Compressed Move---------------------------------------------(?????)

    [N] (CIADD)  Compressed Immediate Addition 08----------------------------(?????)
    [N] (CIADD)  Compressed Immediate Addition 16----------------------------(?????)
    [N] (CIADD)  Compressed Immediate Addition 32----------------------------(?????)
    [N] (CIADD)  Compressed Immediate Addition 64----------------------------(?????)
    [N] (CBEQZ)  Compressed Branch If NEZ 08---------------------------------(?????)
    [N] (CBEQZ)  Compressed Branch If NEZ 16---------------------------------(?????)
    [N] (CBEQZ)  Compressed Branch If NEZ 32---------------------------------(?????)
    [N] (CBEQZ)  Compressed Branch If NEZ 64---------------------------------(?????)
    ...12

    [O] (CCAL) Branch If Zero Flag
    [O] (CCAL) Compressed Function Call

    TODO: finish this
}
______________________________________________________________________________________________________________________________________________________________________

module tree:


MODULES
      |
      |__Computational (C)
      |              |
      |              |__Scalar
      |              |       |
      |              |       |__Integer
      |              |       |        |
      |              |       |        |__Basic                      (CSIB)
      |              |       |        |__Advanced                   (CSIA)
      |              |       |        |__Compressed                 (CSIR)
      |              |       |
      |              |       |__Floating-point
      |              |                       |
      |              |                       |__Basic               (CSFB)
      |              |                       |__Advanced            (CSFA)
      |              |                       |__Compressed          (CSFR)
      |              |
      |              |__Vector
      |                      |
      |                      |__Integer
      |                      |        |
      |                      |        |__Basic                      (CVIB)
      |                      |        |__Advanced                   (CVIA)
      |                      |
      |                      |__Floating-point
      |                                      |
      |                                      |__Basic               (CVFB)
      |                                      |__Advanced            (CVFA)
      |
      |__Data-transfer (D)
      |              |
      |              |__Scalar
      |              |       |
      |              |       |__Basic                               (DSB)
      |              |       |__Advanced                            (DSA)
      |              |       |__Atomic                              (DST)
      |              |       |__Block                               (DSM)
      |              |       |__Compressed                          (DSR)
      |              |
      |              |__Vector
      |                      |
      |                      |__Basic                               (DVB)
      |                      |__Advanced                            (DVA)
      |
      |__Control-transfer (J)
      |                 |
      |                 |__Scalar
      |                 |       |
      |                 |       |__Integer
      |                 |       |        |
      |                 |       |        |__Basic                   (JSIB)
      |                 |       |        |__Advanced                (JSIA)
      |                 |       |        |__Compressed              (JSIR)
      |                 |       |
      |                 |       |__Floating-point
      |                 |                       |
      |                 |                       |__Basic            (JSFB)
      |                 |                       |__Advanced         (JSFA)
      |                 |                       |__Compressed       (JSFR)
      |                 |
      |                 |__Vector
      |                         |
      |                         |__Integer
      |                         |        |
      |                         |        |__Basic                   (JVIB)
      |                         |        |__Advanced                (JVIA)
      |                         |
      |                         |__Floating-point
      |                                         |
      |                                         |__Basic            (JVFB)
      |                                         |__Advanced         (JVFA)
      |
      |__System (Y)
              |
              |__Basic                                              (YB)
              |__Advanced                                           (YA)
              |__Transactional-memory                               (YX)
