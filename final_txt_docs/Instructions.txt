This file is concerned with the list of instructions
______________________________________________________________________________________________________________________________________________________________________

[A]: 72
[B]: 72
[C]: 50
[D]:  4
[E]:  4
[F]:  4
[G]:  2
[H]: 12
[I]:  4
[J]:  1
[K]:  1
[M]: 10
[N]: ??
[O]: ??
[P]:  1
______________________________________________________________________________________________________________________________________________________________________

Computational { [190]

    scalar {

        integer {

            core { (25)

                [A] (ADD)----Addition----------------------------------------(?????)
                [A] (SUB)----Subtraction-------------------------------------(?????)
                [A] (LSH)----Left Shift--------------------------------------(?????)
                [A] (RSH)----Right Shift-------------------------------------(?????)

                [B] (IADD)---Immediate Addition------------------------------(?????)
                [B] (ISUB)---Immediate Subtraction---------------------------(?????)
                [B] (ILSH)---Immediate Left Shift----------------------------(?????)
                [B] (IRSH)---Immediate Right Shift---------------------------(?????)

                [A] (LRT)----Left Rotate-------------------------------------(?????)
                [A] (RRT)----Right Rotate------------------------------------(?????)
                [A] (AND)----Bitwise AND-------------------------------------(?????)
                [A] (NAND)---Bitwise NAND------------------------------------(?????)
                [A] (OR)-----Bitwise OR--------------------------------------(?????)
                [A] (NOR)----Bitwise NOR-------------------------------------(?????)
                [A] (XOR)----Bitwise XOR-------------------------------------(?????)
                [A] (XNOR)---Bitwise XNOR------------------------------------(?????)

                [B] (ILRT)---Immediate Left Rotate---------------------------(?????)
                [B] (IRRT)---Immediate Right Rotate--------------------------(?????)
                [B] (IAND)---Immediate Bitwise AND---------------------------(?????)
                [B] (INAND)--Immediate Bitwise NAND--------------------------(?????)
                [B] (IOR)----Immediate Bitwise OR----------------------------(?????)
                [B] (INOR)---Immediate Bitwise NOR---------------------------(?????)
                [B] (IXOR)---Immediate Bitwise XOR---------------------------(?????)
                [B] (IXNOR)--Immediate Bitwise XNOR--------------------------(?????)
                [B] (IIBF)---Immediate Insert Bit Field----------------------(?????)
            }

            advanced { (38)

                [A] (MUL)----Multiplication----------------------------------(?????)
                [A] (MAC)----Multiply Accumulate-----------------------------(?????)
                [A] (DIV)----Division----------------------------------------(?????)
                [A] (REM)----Remainder---------------------------------------(?????)
                [A] (ADDC)---Addition Carry----------------------------------(?????)
                [A] (SUBC)---Subtraction Carry-------------------------------(?????)
                [A] (LSHC)---Left Shift Carry--------------------------------(?????)
                [A] (RSHC)---Right Shift Carry-------------------------------(?????)
                [A] (HMUL)---High Multiplication-----------------------------(?????)
                [A] (HMAC)---High Multiply Accumulate------------------------(?????)
                [A] (HLSH)---High Left Shift---------------------------------(?????)
                [A] (HRSH)---High Right Shift--------------------------------(?????)

                [B] (IMUL)---Immediate Multiplication------------------------(?????)
                [B] (IMAC)---Immediate Multiply Accumulate-------------------(?????)
                [B] (IDIV)---Immediate Division------------------------------(?????)
                [B] (IREM)---Immediate Remainder-----------------------------(?????)
                [B] (HIMUL)--Immediate High Multiplication-------------------(?????)
                [B] (IHMAC)--Immediate High Multiply Accumulate--------------(?????)
                [B] (IHLSH)--Immediate High Left Shift-----------------------(?????)
                [B] (IHRSH)--Immediate High Right Shift----------------------(?????)
                [B] (IADDC)--Immediate Addition Carry------------------------(?????)
            	[B] (ISUBC)--Immediate Subtraction Carry---------------------(?????)
            	[B] (ILSHC)--Immediate Left Shift Carry----------------------(?????)
            	[B] (IRSHC)--Immediate Right Shift Carry---------------------(?????)

                [A] (SWP)----Bit Swap----------------------------------------(?????)
                [A] (IMP)----Bitwise IMP-------------------------------------(?????)
                [A] (NIMP)---Bitwise NIMP------------------------------------(?????)
                [A] (CLMUL)--Carry-less Multiplication-----------------------(?????)

                [B] (ISWP)---Immediate Bit Swap------------------------------(?????)
                [B] (IIMP)---Immediate Bitwise IMP---------------------------(?????)
                [B] (INIMP)--Immediate Bitwise NIMP--------------------------(?????)
                [B] (ICLMUL)-Immediate Carry-less Multiplication-------------(?????)

                [C] (CTO)----Count Ones--------------------------------------(?????)
            	[C] (CTLO)---Count Leading Ones------------------------------(?????)
            	[C] (CTTO)---Count Trailing Ones-----------------------------(?????)
            	[C] (CTZ)----Count Zeros-------------------------------------(?????)
            	[C] (CTLZ)---Count Leading Zeros-----------------------------(?????)
            	[C] (CTTZ)---Count Trailing Zeros----------------------------(?????)
            }
        }

        floating point {

            core { (8)

                [A] (FADD)---FP. Addition------------------------------------(?????)
                [A] (FSUB)---FP. Subtraction---------------------------------(?????)
                [A] (FMUL)---FP. Multiplication------------------------------(?????)
                [A] (FDIV)---FP. Division------------------------------------(?????)

                [B] (IFADD)--Immediate FP. Addition--------------------------(?????)
                [B] (IFSUB)--Immediate FP. Subtraction-----------------------(?????)
                [B] (IFMUL)--Immediate FP. Multiplication--------------------(?????)
                [B] (IFDIV)--Immediate FP. Division--------------------------(?????)
            }

            advanced { (10)

                [A] (FMAC)---FP. Multiply Accumulate-------------------------(?????)
                [A] (FPOW)---FP. Power---------------------------------------(?????)
                [A] (FPOW)---FP. Remainder-----------------------------------(?????)

                [B] (IFMAC)--Immediate FP. Multiply Accumulate---------------(?????)
                [B] (IFPOW)--Immediate FP. Power-----------------------------(?????)
                [B] (IFPOW)--Immediate FP. Remainder-------------------------(?????)

                [C] (SIN)----Sin---------------------------------------------(?????)
                [C] (COS)----Cos---------------------------------------------(?????)
                [C] (ASIN)---Arcsin------------------------------------------(?????)
                [C] (ACOS)---Arccos------------------------------------------(?????)
            }
        }
    }

    vector {

        integer {

            core { (25)

                [A] (VADD)--Vector Addition----------------------------------(?????)
                [A] (VSUB)--Vector Subtraction-------------------------------(?????)
                [A] (VLSH)--Vector Left Shift--------------------------------(?????)
                [A] (VRSH)--Vector Right Shift-------------------------------(?????)

                [B] (VIADD)--Vector Immediate Addition-----------------------(?????)
                [B] (VISUB)--Vector Immediate Subtraction--------------------(?????)
                [B] (VILSH)--Vector Immediate Left Shift---------------------(?????)
                [B] (VIRSH)--Vector Immediate Right Shift--------------------(?????)

                [A] (VLRT)----Vector Left Rotate-----------------------------(?????)
                [A] (VRRT)----Vector Right Rotate----------------------------(?????)
                [A] (VAND)----Vector Bitwise AND-----------------------------(?????)
                [A] (VNAND)---Vector Bitwise NAND----------------------------(?????)
                [A] (VOR)-----Vector Bitwise OR------------------------------(?????)
                [A] (VNOR)----Vector Bitwise NOR-----------------------------(?????)
                [A] (VXOR)----Vector Bitwise XOR-----------------------------(?????)
                [A] (VXNOR)---Vector Bitwise XNOR----------------------------(?????)

                [B] (VILRT)---Vector Immediate Left Rotate-------------------(?????)
                [B] (VIRRT)---Vector Immediate Right Rotate------------------(?????)
                [B] (VIAND)---Vector Immediate Bitwise AND-------------------(?????)
                [B] (VINAND)--Vector Immediate Bitwise NAND------------------(?????)
                [B] (VIOR)----Vector Immediate Bitwise OR--------------------(?????)
                [B] (VINOR)---Vector Immediate Bitwise NOR-------------------(?????)
                [B] (VIXOR)---Vector Immediate Bitwise XOR-------------------(?????)
                [B] (VIXNOR)--Vector Immediate Bitwise XNOR------------------(?????)
                [B] (VIIBF)---Vector Immediate Insert Bit Field--------------(?????)
            }

            advanced { (51)

                [A] (VMUL)---Vector Multiplication---------------------------(?????)
                [A] (VMAC)---Vector Multiply Accumulate----------------------(?????)
                [A] (VDIV)---Vector Division---------------------------------(?????)
                [A] (VREM)---Vector Remainder--------------------------------(?????)
                [A] (VADDC)--Vector Addition Carry---------------------------(?????)
                [A] (VSUBC)--Vector Subtraction Carry------------------------(?????)
                [A] (VLSHC)--Vector Left Shift Carry-------------------------(?????)
                [A] (VRSHC)--Vector Right Shift Carry------------------------(?????)
                [A] (VHMUL)--Vector High Multiplication----------------------(?????)
                [A] (VHMAC)--Vector High Multiply Accumulate-----------------(?????)
                [A] (VHLSH)--Vector High Left Shift--------------------------(?????)
                [A] (VHRSH)--Vector High Right Shift-------------------------(?????)

                [B] (VIMUL)--Vector Immediate Multiplication-----------------(?????)
                [B] (VIMAC)--Vector Immediate Multiply Accumulate------------(?????)
                [B] (VIDIV)--Vector Immediate Division-----------------------(?????)
                [B] (VIREM)--Vector Immediate Remainder----------------------(?????)
                [B] (VHIMUL)-Vector Immediate High Multiplication------------(?????)
                [B] (VIHMAC)-Vector Immediate High Multiply Accumulate-------(?????)
                [B] (VIHLSH)-Vector Immediate High Left Shift----------------(?????)
                [B] (VIHRSH)-Vector Immediate High Right Shift---------------(?????)
                [B] (VIADDC)-Vector Immediate Addition Carry-----------------(?????)
                [B] (VISUBC)-Vector Immediate Subtraction Carry--------------(?????)
                [B] (VILSHC)-Vector Immediate Left Shift Carry---------------(?????)
                [B] (VIRSHC)-Vector Immediate Right Shift Carry--------------(?????)

                [A] (VSWP)----Vector Bit Swap--------------------------------(?????)
                [A] (VIMP)----Vector Bitwise IMP-----------------------------(?????)
                [A] (VNIMP)---Vector Bitwise NIMP----------------------------(?????)
                [A] (VCLMUL)--Vector Carry-less Multiplication---------------(?????)

                [B] (VISWP)---Vector Immediate Bit Swap----------------------(?????)
                [B] (VIIMP)---Vector Immediate Bitwise IMP-------------------(?????)
                [B] (VINIMP)--Vector Immediate Bitwise NIMP------------------(?????)
                [B] (VICLMUL)-Vector Immediate Carry-less Multiplication-----(?????)

                [C] (RADD)----Reduced Addition-------------------------------(?????)
                [C] (RSUB)----Reduced Subtraction----------------------------(?????)
                [C] (RMUL)----Reduced Multiplication-------------------------(?????)
                [C] (RMAC)----Reduced Multiply Accumulate--------------------(?????)
                [C] (RDIV)----Reduced Division-------------------------------(?????)
                [C] (RAND)----Reduced Bitwise AND----------------------------(?????)
                [C] (RNAND)---Reduced Bitwise NAND---------------------------(?????)
                [C] (ROR)-----Reduced Bitwise OR-----------------------------(?????)
                [C] (RNOR)----Reduced Bitwise NOR----------------------------(?????)
                [C] (RXOR)----Reduced Bitwise XOR----------------------------(?????)
                [C] (RXNOR)---Reduced Bitwise XNOR---------------------------(?????)
                [C] (RIMP)----Reduced Bitwise IMP----------------------------(?????)
                [C] (RNIMP)---Reduced Bitwise NIMP---------------------------(?????)

                [C] (VCTO)----Vector Count Ones------------------------------(?????)
                [C] (VCTLO)---Vector Count Leading Ones----------------------(?????)
                [C] (VCTTO)---Vector Count Trailing Ones---------------------(?????)
                [C] (VCTZ)----Vector Count Zeros-----------------------------(?????)
                [C] (VCTLZ)---Vector Count Leading Zeros---------------------(?????)
                [C] (VCTTZ)---Vector Count Trailing Zeros--------------------(?????)
            }
        }

        floating point {

            core { (8)

                [A] (VFADD)--Vector FP. Addition-----------------------------(?????)
                [A] (VFSUB)--Vector FP. Subtraction--------------------------(?????)
                [A] (VFMUL)--Vector FP. Multiplication-----------------------(?????)
                [A] (VFDIV)--Vector FP. Division-----------------------------(?????)

                [B] (VIFADD)-Vector Immediate FP. Addition-------------------(?????)
                [B] (VIFSUB)-Vector Immediate FP. Subtraction----------------(?????)
                [B] (VIFMUL)-Vector Immediate FP. Multiplication-------------(?????)
                [B] (VIFDIV)-Vector Immediate FP. Division-------------------(?????)
            }

            advanced { (17)

                [A] (VFMAC)---Vector FP. Multiply Accumulate-----------------(?????)
                [A] (VFPOW)---Vector FP. Power-------------------------------(?????)
                [A] (VFREM)---Vector FP. Remainder---------------------------(?????)

                [B] (VIFMAC)--Vector Immediate FP. Multiply Accumulate-------(?????)
                [B] (VIFPOW)--Vector Immediate FP. Power---------------------(?????)
                [B] (VIFREM)--Vector Immediate FP. Remainder-----------------(?????)

                [C] (VSIN)----Vector Sin-------------------------------------(?????)
                [C] (VCOS)----Vector Cos-------------------------------------(?????)
                [C] (VASIN)---Vector Arcsin----------------------------------(?????)
                [C] (VACOS)---Vector Arccos----------------------------------(?????)

                [C] (VRFADD)--Vector Reduced FP. Addition--------------------(?????)
                [C] (VRFSUB)--Vector Reduced FP. Subtraction-----------------(?????)
                [C] (VRFBSUB)-Vector Reduced FP. Back Subtraction------------(?????)
                [C] (VRFMUL)--Vector Reduced FP. Multiplication--------------(?????)
                [C] (VRFMAC)--Vector Reduced FP. Multiply Accumulate---------(?????)
                [C] (VRFDIV)--Vector Reduced FP. Division--------------------(?????)
                [C] (VRFBDIV)-Vector Reduced FP. Back Division---------------(?????)
            }
        }
    }

    casts { (8)

        [C] (SIIC)-Scalar Integer-Integer Cast-------------------------------(?????)
        [C] (SFFC)-Scalar FP-FP Cast-----------------------------------------(?????)
        [C] (VIIC)-Vector Integer-Integer Cast-------------------------------(?????)
        [C] (VFFC)-Vector FP-FP Cast-----------------------------------------(?????)

        [C] (SIFC)-Scalar Integer-FP Cast------------------------------------(?????)
        [C] (SFIC)-Scalar FP-Integer Cast------------------------------------(?????)
        [C] (VIFC)-Vector Integer-FP Cast------------------------------------(?????)
        [C] (VFIC)-Vector FP-Integer Cast------------------------------------(?????)
    }
}
______________________________________________________________________________________________________________________________________________________________________

Data Transfer { (17)

    loads & stores {

        scalar {

            [D] (MLD)---Memory Load------------------------------------------(?????)
            [D] (MST)---Memory Store-----------------------------------------(?????)
            [E] (IMLD)--Indexed Memory Load----------------------------------(?????)
            [E] (IMST)--Indexed Memory Store---------------------------------(?????)
            [F] (RIMLD)-Register Indexed Memory Load-------------------------(?????)
            [F] (RIMST)-Register Indexed Memory Store------------------------(?????)
        }

        vector {

            [D] (VMLD)---Vector Memory Load----------------------------------(?????)
            [D] (VMST)---Vector Memory Store---------------------------------(?????)
            [E] (VIMLD)--Vector Indexed Memory Load--------------------------(?????)
            [E] (VIMST)--Vector Indexed Memory Store-------------------------(?????)
            [F] (VRIMLD)-Vector Register Indexed Memory Load-----------------(?????)
            [F] (VRIMST)-Vector Register Indexed Memory Store----------------(?????)
        }

        atomic {

            [A] (LL)-Load Linked---------------------------------------------(?????)
            [A] (SC)-Store Conditional---------------------------------------(?????)
        }

        block {

            [G] (BLD)-Block Load---------------------------------------------(?????)
            [G] (BST)-Block Store--------------------------------------------(?????)
        }
    }

    moves {

        [C] (SRCPY) Special Register Copy------------------------------------(?????)
    }
}
______________________________________________________________________________________________________________________________________________________________________

Control transfer { (25)

    branches {

        integer {

            [H] (BEQ)   Branch If Equal--------------------------------------(?????)
            [H] (BNE)   Branch If Not Equal----------------------------------(?????)
            [H] (BLT)   Branch If Less Than----------------------------------(?????)
            [H] (BLE)   Branch If Less Equal---------------------------------(?????)
            [H] (UBLT)  Unsigned Branch If Less Than-------------------------(?????)
            [H] (UBLE)  Unsigned Branch If Less Equal------------------------(?????)

            [I] (BTST)  Branch If Test---------------------------------------(?????)
            [I] (UBTST) Unsigned Branch If Test------------------------------(?????)
        }

        floating point {

            [H] (FBEQ)   FP. Branch If Equal---------------------------------(?????)
            [H] (FBNE)   FP. Branch If Not Equal-----------------------------(?????)
            [H] (FBLT)   FP. Branch If Less Than-----------------------------(?????)
            [H] (FBLE)   FP. Branch If Less Equal----------------------------(?????)
            [H] (UFBLT)  Unsigned FP. Branch If Less Than--------------------(?????)
            [H] (UFBLE)  Unsigned FP. Branch If Less Equal-------------------(?????)

            [I] (FBTST)  FP. Branch If Test----------------------------------(?????)
            [I] (UFBTST) Unsigned FP. Branch If Test-------------------------(?????)
        }

       [G] (BAF) Branch If Arithmetic Flag-----------------------------------(?????)
       [G] (BSF) Branch If System Flag---------------------------------------(?????)
    }

    calls {

        [J] (CAL)  Function Call---------------------------------------------(?????)
        [K] (RCAL) Register Function Call------------------------------------(?????)
        [?] (RET)  Function Return-------------------------------------------(?????)
    }

    mask settings {

        [C] (SIMSK) Scalar Integer Mask Set----------------------------------(?????)
        [C] (SFMSK) Scalar FP. Mask Set--------------------------------------(?????)
        [C] (VIMSK) Vector Integer Mask Set----------------------------------(?????)
        [C] (VFMSK) Vector FP. Mask Set--------------------------------------(?????)

        TODO: add masks settings on flags...
    }
}
______________________________________________________________________________________________________________________________________________________________________

System {

    [P] (NOP)---No Operation-------------------------------------------------(?????)
    [P] (UERET)-User Event Return--------------------------------------------(?????)
  * [P] (SERET)-Supervisor Event Return--------------------------------------(?????)
    [P] (FNCI)--Fence Instructions-------------------------------------------(?????)
    [P] (TBEG)--Transaction Begin--------------------------------------------(?????)
    [P] (TEND)--Transaction End----------------------------------------------(?????)
    [P] (TABT)--Transaction Abort--------------------------------------------(?????)
    [P] (TCHK)--Transaction Check--------------------------------------------(?????)

  * [?] (CACOP)-Cache Operation----------------------------------------------(?????)
  * [?] (MMUOP)-MMU Operation------------------------------------------------(?????)
    [?] (SYSCL)-System Call--------------------------------------------------(?????)
    [?] (WINT)--Wait For Interrupt-------------------------------------------(?????)
    [?] (BPTRG)-Breakpoint Trigger-------------------------------------------(?????)

  * [?] (SDMP)--State Dump---------------------------------------------------(?????)
  * [?] (SRST)--State Restore------------------------------------------------(?????)
}
______________________________________________________________________________________________________________________________________________________________________

Compressed {

    [M] (CADD)   Compressed Addition-----------------------------------------(?????)
    [M] (CSUB)   Compressed Subtraction--------------------------------------(?????)
    [M] (CSUB)   Compressed Multiplication-----------------------------------(?????)
    [M] (CSUB)   Compressed Division-----------------------------------------(?????)
    [M] (CLSH)   Compressed Left Shift---------------------------------------(?????)
    [M] (CRSH)   Compressed Right Shift--------------------------------------(?????)

    [?] (CIADD)  Compressed Immediate Addition_08----------------------------(?????)
    [?] (CIADD)  Compressed Immediate Addition_16----------------------------(?????)
    [?] (CIADD)  Compressed Immediate Addition_32----------------------------(?????)
    [?] (CIADD)  Compressed Immediate Addition_64----------------------------(?????)

    [M] (CFADD) Compressed FP. Addition--------------------------------------(?????)
    [M] (CFSUB) Compressed FP. Subtraction-----------------------------------(?????)
    [M] (CFMUL) Compressed FP. Multiplication--------------------------------(?????)
    [M] (CFDIV) Compressed FP. Division--------------------------------------(?????)
}
______________________________________________________________________________________________________________________________________________________________________
