Computational {
	
	Integer {

		Basic {

			[A] (ADD)----Addition--------------------------------------------OPCODE:
            [A] (SUB)----Subtraction-----------------------------------------OPCODE:
            [A] (AND)----Bitwise AND-----------------------------------------OPCODE:
            [A] (NAND)---Bitwise NAND----------------------------------------OPCODE:
            [A] (OR)-----Bitwise OR------------------------------------------OPCODE:
            [A] (NOR)----Bitwise NOR-----------------------------------------OPCODE:
            [A] (XOR)----Bitwise XOR-----------------------------------------OPCODE:
            [A] (XNOR)---Bitwise XNOR----------------------------------------OPCODE:
            [A] (ALSH)---Arithmetic Left Shift-------------------------------OPCODE:
            [A] (ARSH)---Arithmetic Right Shift------------------------------OPCODE:
            [A] (LLSH)---Logical Left Shift----------------------------------OPCODE:
            [A] (LRSH)---Logical Right Shift---------------------------------OPCODE:
            [A] (LRT)----Left Rotate-----------------------------------------OPCODE:
            [A] (RRT)----Right Rotate----------------------------------------OPCODE:

            [B] (IADD)---Immediate Addition----------------------------------OPCODE:
            [B] (ISUB)---Immediate Subtraction-------------------------------OPCODE:
            [B] (IAND)---Immediate Bitwise AND-------------------------------OPCODE:
            [B] (INAND)--Immediate Bitwise NAND------------------------------OPCODE:
            [B] (IOR)----Immediate Bitwise OR--------------------------------OPCODE:
            [B] (INOR)---Immediate Bitwise NOR-------------------------------OPCODE:
            [B] (IXOR)---Immediate Bitwise XOR-------------------------------OPCODE:
            [B] (IXNOR)--Immediate Bitwise XNOR------------------------------OPCODE:
            [B] (IALSH)--Immediate Arithmetic Left Shift---------------------OPCODE:
            [B] (IARSH)--Immediate Arithmetic Right Shift--------------------OPCODE:
            [B] (ILLSH)--Immediate Logical Left Shift------------------------OPCODE:
            [B] (ILRSH)--Immediate Logical Right Shift-----------------------OPCODE:
            [B] (ILRT)---Immediate Left Rotate-------------------------------OPCODE:
            [B] (IRRT)---Immediate Right Rotate------------------------------OPCODE:
		}

		Advanced {

            [A] (MUL)----Multiplication--------------------------------------OPCODE:
            [A] (MAC)----Multiply Accumulate---------------------------------OPCODE:
            [A] (DIV)----Division--------------------------------------------OPCODE:
            [A] (REM)----Remainder-------------------------------------------OPCODE:
            [A] (IMP)----Bitwise IMP-----------------------------------------OPCODE:
            [A] (NIMP)---Bitwise NIMP----------------------------------------OPCODE:
            [A] (SWP)----Bit Swap--------------------------------------------OPCODE:

            [B] (IMUL)---Immediate Multiplication----------------------------OPCODE:
            [B] (IMAC)---Immediate Multiply Accumulate-----------------------OPCODE:
            [B] (IDIV)---Immediate Division----------------------------------OPCODE:
            [B] (IREM)---Immediate Remainder---------------------------------OPCODE:
            [B] (IIMP)---Immediate Bitwise IMP-------------------------------OPCODE:
            [B] (INIMP)--Immediate Bitwise NIMP------------------------------OPCODE:
            [B] (ISWP)---Immediate Bit Swap----------------------------------OPCODE:

            Multiword {

            	[F] (MWADD)--Multiword Addition----------------------------------OPCODE:
            	[F] (MWSUB)--Multiword Subtraction-------------------------------OPCODE:
            	[F] (MWMUL)--Multiword Multiplication----------------------------OPCODE:
            	[F] (MWDIV)--Multiword Division----------------------------------OPCODE:
            	[F] (MALSH)--Multiword Arithmetic Left Shift---------------------OPCODE:
            	[F] (MARSH)--Multiword Arithmetic Right Shift--------------------OPCODE:
            	[F] (MLLSH)--Multiword Logical Left Shift------------------------OPCODE:
            	[F] (MLRSH)--Multiword Logical Right Shift-----------------------OPCODE:

            	...
            }
		}
	}

	Floating point {

		Basic {

			[A] (FADD)---FP. Addition----------------------------------------OPCODE:
            [A] (FSUB)---FP. Subtraction-------------------------------------OPCODE:
            [A] (FMUL)---FP. Multiplication----------------------------------OPCODE:
            [A] (FDIV)---FP. Division----------------------------------------OPCODE:

            [B] (IFADD)--Immediate FP. Addition------------------------------OPCODE:
            [B] (IFSUB)--Immediate FP. Subtraction---------------------------OPCODE:
            [B] (IFMUL)--Immediate FP. Multiplication------------------------OPCODE:
            [B] (IFDIV)--Immediate FP. Division------------------------------OPCODE:
		}

		Advanced {

			[A] (FMAC)---FP. Multiply Accumulate-----------------------------OPCODE:
            [A] (FPOW)---FP. Power-------------------------------------------OPCODE:
            [A] (FPOW)---FP. Remainder---------------------------------------OPCODE:

            [B] (IFMAC)--Immediate FP. Multiply Accumulate-------------------OPCODE:
            [B] (IFPOW)--Immediate FP. Power---------------------------------OPCODE:
            [B] (IFPOW)--Immediate FP. Remainder-----------------------------OPCODE:
		}
	}
}
______________________________________________________________________________________________________________________________________________________________________

Data transfer { OK
	
	Scalar {

		Basic {

			[D]   (MLD)---Memory Load----------------------------------------OPCODE:
            [D]   (MST)---Memory Store---------------------------------------OPCODE:
            [D.l] (LMLD)--Long Memory Load-----------------------------------OPCODE:
            [D.l] (LMST)--Long Memory Store----------------------------------OPCODE:

            [C]   (MOV)----Move----------------------------------------------OPCODE:
    		[C]   (MOVTS)--Move To Special-----------------------------------OPCODE:
    		[C]   (MOVFS)--Move From Special---------------------------------OPCODE:
		}

		Advanced {

			[E]   (IMLD)---Indexed Memory Load-------------------------------OPCODE:
            [E]   (IMST)---Indexed Memory Store------------------------------OPCODE:
            [E.l] (LIMLD)--Long Indexed Memory Load--------------------------OPCODE:
            [E.l] (LIMST)--Long Indexed Memory Store-------------------------OPCODE:

            [F]   (RIMLD)--Register Indexed Memory Load----------------------OPCODE:
            [F]   (RIMST)--Register Indexed Memory Store---------------------OPCODE:

            [C]   (SWP)----Swap----------------------------------------------OPCODE:
            [C]   (SWPTS)--Swap To Special-----------------------------------OPCODE:
            [C]   (SWPFS)--Swap From Special---------------------------------OPCODE:
		}
	}

	Vector {

		Basic {

			[D]   (VMLD)---Vector Memory Load--------------------------------OPCODE:
            [D]   (VMST)---Vector Memory Store-------------------------------OPCODE:
            [D.l] (LVMLD)--Long Vector Memory Load---------------------------OPCODE:
            [D.l] (LVMST)--Long Vector Memory Store--------------------------OPCODE:

            [C]   (VMOV)---Vector Move---------------------------------------OPCODE:
    		[C]   (MOVTV)--Move To Vector------------------------------------OPCODE:
    		[C]   (MOVFV)--Move From Vector----------------------------------OPCODE:
		}

		Advanced {

			[E]   (VIMLD)---Vector Indexed Memory Load-----------------------OPCODE:
            [E]   (VIMST)---Vector Indexed Memory Store----------------------OPCODE:
            [E.l] (LVIMLD)--Long Vector Indexed Memory Load------------------OPCODE:
            [E.l] (LVIMST)--Long Vector Indexed Memory Store-----------------OPCODE:

            [A]   (VGAT)---Vector Gather-------------------------------------OPCODE:
            [A]   (VSCA)---Vector Scatter------------------------------------OPCODE:

            [F]   (VRIMLD)--Vector Register Indexed Memory Load--------------OPCODE:
            [F]   (VRIMST)--Vector Register Indexed Memory Store-------------OPCODE:

            [C]   (VSWP)---Vector Swap---------------------------------------OPCODE:
            [C]   (SWPTV)--Swap To Vector------------------------------------OPCODE:
            [C]   (SWPFV)--Swap From Vector----------------------------------OPCODE:
		}
	}

	Atomic {

		[A] (LL)--Load Linked------------------------------------------------OPCODE:
        [A] (SC)--Store Conditional------------------------------------------OPCODE:
        [A] (CAS)-Compare And Swap-------------------------------------------OPCODE:
	}

	Block {

		[G]   (BLD)--Block Load----------------------------------------------OPCODE:
        [G]   (BST)--Block Store---------------------------------------------OPCODE:
        [G.l] (LBLD)-Long Block Load-----------------------------------------OPCODE:
        [G.l] (LBST)-Long Block Store----------------------------------------OPCODE:
	}
}
______________________________________________________________________________________________________________________________________________________________________

Control transfer {
	
	Scalar {

		Basic {

			[D]   (BEQ)---Branch If Equal--------------------------------------OPCODE:
            [D]   (BNE)---Branch If Not Equal----------------------------------OPCODE:
            [D]   (BLT)---Branch If Less Than----------------------------------OPCODE:
            [D]   (BLE)---Branch If Less Equal---------------------------------OPCODE:
            [D.l] (LCB)---Long Compare Branch----------------------------------OPCODE:

            [D]   (CAL)---Function Call----------------------------------------OPCODE:
			[D.l] (LCAL)--Long Function Call-----------------------------------OPCODE:

			[P]   (RET)---Function Return--------------------------------------OPCODE:
		}

		Advanced {

			[G]   (BTST)--Branch If Test---------------------------------------OPCODE:
			[G.l] (LBTST)-Long Branch If Test----------------------------------OPCODE:

			[D]   (RCAL)--Register Function Call-------------------------------OPCODE:
			[D.l] (LRCAL)-Long Register Function Call--------------------------OPCODE:
		}

		Mask {

			...
		}
	}

	Vector {

		Basic {

			...
		}

		Advanced {

			...
		}
	}
}
______________________________________________________________________________________________________________________________________________________________________

System {
	
	...
}
______________________________________________________________________________________________________________________________________________________________________

Compressed {
	
	
}