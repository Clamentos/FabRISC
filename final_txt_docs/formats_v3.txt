[F]   |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|RD(05)| 				r-r-r-r

[A]   |OPCODE(12)|MOD(04)|RA(05)|RB(05)|RC(05)| 					r-r-r

[C]   |OPCODE(16)|MOD(06)|RA(05)|RB(05)| 							r-r

[B]   |OPCODE(08)|MOD(04)|RA(05)|RB(05)|IMM(10)| 					r-r-i
[B.l] |OPCODE(08)|MOD(04)|RA(05)|RB(05)|IMM(26)| 					r-r-i

[D]   |OPCODE(07)|MOD(03)|RA(05)|RB(05)|IMM(12)| [H] [K] 			r-r-i
[D.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|IMM(26)| [H.l] [K.l]		r-r-i

[E]   |OPCODE(07)|MOD(03)|RA(05)|RB(05)|RC(05)|IMM(07)| 			r-r-r-i
[E.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|IMM(21)| 			r-r-r-i

[G]   |OPCODE(07)|MOD(04)|RA(05)|IMM(16)| [J] 						r-i
[G.l] |OPCODE(07)|MOD(04)|RA(05)|IMM(32)| [J.1] 					r-i

[M]   |OPCODE(07)|MOD(03)|RD/RS1(03)|RS2(03)|
[N]   |OPCODE(07)|RA(03) |IMM(06)|
[O]   |OPCODE(07)|IMM(09)|
[P]   |OPCODE(16)|




0000000xxxxxxxxx -> 1011011xxxxxxxxx 		 92      83
10111000xxxxxxxx -> 11110111xxxxxxxx 		 64      56
111110000000xxxx -> 111110111111xxxx 		 64      33
1111110000000000 -> 1111110001111111 		128

896

______________________________________________________________________________________________________________________________________________________________________

[A] format {

    [A] |OPCODE(12)|MOD(05)|RA(05)|RB(05)|RC(05)| length: 4B

    computational [R-R-R] instructions:

        MOD(05): "ttmvv"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('vv' is vector mode: 00 scalar, 01 vector-vector, 10 vector-scalar)

    vector gather & scatter instructions:

        MOD(05): "ttmxx"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('x' signifies unused bit)

    atomic CAS instructions:

        MOD(05): "ttmcc"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('cc' is condition to perform: 00 EQ, 01 NE, 10 LT, 11 LE)
}
______________________________________________________________________________________________________________________________________________________________________

[B] format {

    [B]   |OPCODE(08)|MOD(04)|RA(05)|RB(05)|IMM(10)| length: 4B
    [B.l] |OPCODE(08)|MOD(04)|RA(05)|RB(05)|IMM(26)| length: 6B

    computational [R-R-I] instructions:

        MOD(04): "ttmv"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is mask: 0 unmasked, 1 masked)
        ('v' is vector mode: 0 scalar, 1 vector-scalar)
}
______________________________________________________________________________________________________________________________________________________________________

[C] format {

    [C] |OPCODE(16)|MOD(06)|RA(05)|RB(05)| length: 4B

    computational [R-R] instructions:
    
        MOD(06): "ttmxxx"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('x' signifies unused bit)

    casts & conversion instructions:
    
        MOD(06): "ttmxtt"

        ('tttt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('x' signifies unused bit)

    move & swap instructions:

        MOD(06): "ttmnnn"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('nnn' is number of regs acted)

    compare mask setting instructions:
    
        MOD(06): "ttmxcc"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('x' signifies unused bit)
        ('cc' is condition: 00 EQ, 01 NE, 10 LT, 11 LE)
}
______________________________________________________________________________________________________________________________________________________________________

[D] format {

    [D]   |OPCODE(07)|MOD(03)|RA(05)|RB(05)|IMM(12)| length: 4B
    [D.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|IMM(26)| length: 6B

    scalar load & store instructions:

        MOD(03): "ttm"
        MOD(05): "ttmuu"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)

    vector load & store instructions:

        MOD(03): "max"
        MOD(05): "mauux"

        ('m' is mask: 0 unmasked, 1 masked)
        ('a' is addressing mode: 0 standard, 1 striding)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)
        ('x' signifies unused bit)

    conditional compare branches:

        MOD(03): "ttp"
        MOD(05): "ttpcc"

        ('tt' is data type length: 8, 16, 32, 64)
        ('cc' is condition: 00 EQ, 01 NE, 10 LT, 11 LE)
        ('p' is floating point mode)

    indirect function calls & jumps:

    	MOD(03): "iii"
    	MOD(05): "iiiii"

    	('i' extra immediate)
}
______________________________________________________________________________________________________________________________________________________________________

[E] format {

    [E]   |OPCODE(07)|MOD(03)|RA(05)|RB(05)|RC(05)|IMM(07)| length: 4B
    [E.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|IMM(21)| length: 6B

    scalar load & store instructions:

        MOD(03): "ttm"
        MOD(05): "ttmuu"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)

    vector load & store instructions:

        MOD(03): "max"
        MOD(05): "mauux"

        ('m' is mask: 0 unmasked, 1 masked)
        ('a' is addressing mode: 0 standard, 1 striding)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)
        ('x' signifies unused bit)
}
______________________________________________________________________________________________________________________________________________________________________

[F] format {

    [F] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|RD(05)| length: 4B

    scalar load & store instructions:

        MOD(05): "ttmuu"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)

    vector load & store instructions:

        MOD(05): "mauux"

        ('m' is mask: 0 unmasked, 1 masked)
        ('a' is addressing mode: 0 standard, 1 striding)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)
        ('x' signifies unused bit)
}
______________________________________________________________________________________________________________________________________________________________________

[G] format {

   [G]   |OPCODE(07)|MOD(04)|RA(05)|IMM(16)| length: 4B
   [G.l] |OPCODE(07)|MOD(04)|RA(05)|IMM(32)| length: 6B

    block load & store instructions:
    
        MOD(04): "ffmx"

        ('ff' is file selector: 00 SGPRs, 01 SPRs, 10 VGPRs)
        ('m' is mask: 0 unmasked, 1 masked)
        ('x' signifies unused bit)

    test branches:

        MOD(04): "ffpx"

        ('ff' is condition: 00 EQZ, 01 NEZ, 10 LTZ, 11 LEZ)
        ('p' is floating point mode)
        ('x' signifies unused bit)

    direct function calls & jumps:

    	MOD(04): "iiii"

    	('i' extra immediate)

    bit-field manipulations:

        MOD(04):

            "smcc"

            ...
}
______________________________________________________________________________________________________________________________________________________________________

[M] format {
    
    [M] |OPCODE(08)|MOD(02)|RD/RS1(03)|RS2(03)| length: 2B

    compressed computational [R-R] instructions:

        MOD(02): "ttp"

        ('tt' is data type length: 8, 16, 32, 64)
        ('p' is for floating point mode)
}
______________________________________________________________________________________________________________________________________________________________________

...
______________________________________________________________________________________________________________________________________________________________________

37

COMPUTATIONAL {
    
    normal {

        integer {

            scalar {

                - basic      (CNISB)
                - advanced   (CNISA)
            }

            vector {

                - basic      (CNIVB)
                - advanced   (CNIVA)
                - reduction  (CNIVR)
            }
        }

        floating point {

            scalar {

                - basic      (CNFSB)
                - advanced   (CNFSA)
            }

            vector {

                - basic      (CNFVB)
                - advanced   (CNFVA)
                - reduction  (CNFVR)
            }
        }
    }

    compressed {

        integer {

            - basic          (CCIB)
            - advanced       (CCIA)
        }

        floating point {

            - basic          (CCFB)
            - advanced       (CCFA)
        }
    }

    casts {

        -
        -
        -
        -
    }
}

DATA TRANSFER {
    
    normal {

        scalar {

            - basic          (DNSB)
            - advanced       (DNSA)
        }

        vector {

            - basic          (DNVB)
            - advanced       (DNVA)
            - gather scatter (DNVG)
        }
    }

    - atomic                 (DA)
    - block                  (DB)
    - compressed             (DC)
}

FLOW TRANSFER {
    
    normal {

        integer {

            scalar {

                - basic
                - advanced
                - masks
            }

            vector {

                - basic
                - advanced
            }
        }

        floating point {

            scalar {

                - basic
                - advanced
                - masks
            }

            vector {

                - basic
                - advanced
            }
        }
    }

    - compressed
}

SYSTEM {
    
    - basic
    - advanced
    - fences
}




u-op format:

    |ALU_OP(08)|SH_OP(04)|TLEN(02)|RA(06)|RB(06)|RC(06)|RD(06)|EXT(26)|         64
    |ALU_OP(08)|SH_OP(04)|TLEN(02)|RA(06)|RB(06)|RC(06)|IM(06)|