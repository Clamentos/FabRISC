///
!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! WARNING !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!
this file is outdated


name    format                                                     allocated   current      cost(singular)  cost(total) length

[2R.A]  |OPCODE(20)|MD(02)|RA(05)|RB(05)|--------------------------{ 64}-------{ 39}-------{    1}---------{    64}     4 B
[3R.A]  |OPCODE(15)|MD(02)|RA(05)|RB(05)|RC(05)|-------------------{ 80}-------{ 66}-------{   32}---------{  2560}     4 B
[4R.A]  |OPCODE(10)|MD(02)|RA(05)|RB(05)|RC(05)|RD(05)|------------{ 24}-------{ 15}-------{ 1024}---------{ 24576}     4 B

[I.A]   |OPCODE(08)|IM(24)|----------------------------------------{  2}-------{  2}-------{ 4096}---------{  8192}     4 B
[RI.A]  |OPCODE(09)|MD(02)|RA(05)|IM(16)|--------------------------{ 32}-------{ 25}-------{ 2048}---------{ 65536}     4 B
[2RI.A] |OPCODE(08)|MD(02)|RA(05)|RB(05)|IM(12)|-------------------{ 48}-------{ 47}-------{ 4096}---------{196608}     4 B
[2RI.B] |OPCODE(15)|MD(02)|RA(05)|RB(05)|IM(21)|-------------------{ 32}-------{ 18}-------{   32}---------{  1024}     6 B
[3RI.A] |OPCODE(15)|MD(02)|RA(05)|RB(05)|RC(05)|IM(16)|------------{ 16}-------{  7}-------{   32}---------{   512}     6 B

[4R.B]  |OPCODE(20)|MD(02)|VMD(06)|RA(05)|RB(05)|RC(05)|RD(05)|----{ 64}-------{ 40}-------{    1}---------{    64}     6 B
[3RI.B] |OPCODE(15)|MD(02)|VMD(02)|RA(05)|RB(05)|RC(05)|IM(14)|----{ 64}-------{ 38}-------{   32}---------{  2048}     6 B

[2R.B]  |OPCODE(08)|MD(02)|RA(03)|RB(03)|--------------------------{  8}-------{  8}-------{ 4096}---------{ 32768}     2 B
[I.B]   |OPCODE(06)|IM(10)|----------------------------------------{  2}-------{  2}-------{16384}---------{ 32768}     2 B
[RI.B]  |OPCODE(05)|RA(03)|IM(08)|---------------------------------{ 12}-------{ 10}-------{32768}---------{393216}     2 B
[2RI.C] |OPCODE(04)|RA(03)|RB(03)|IM(06)|--------------------------{  4}-------{  4}-------{65536}---------{262144}     2 B

unmapped encoding space: 26496

///
opcode distribution:

    [2RI.C]         00xx                    4       1101100xx

    [RI.B]          01xxx                   8       110010xxx
    [RI.B]          100xx                   4       1101101xx

    [I.B]           10100x                  2       11011110x

    [2R.B]          10101xxx                8       110011xxx
    [2RI.A]         1011xxxx                16      10100xxxx
    [2RI.A]         110xxxxx                32      1000xxxxx
    [I.A]           1110000x                2       11011111x

    [RI.A]          1110001xx               4       1101110xx
    [RI.A]          111001xxx               8       110100xxx
    [RI.A]          11101xxxx               16      10101xxxx
    [RI.A]          1111000xx               2       11100000x

    [4R.A]          1111001xxx              8       110101xxx
    [4R.A]          111101xxxx              16      10110xxxx

    [2RI.B]         1111100000xxxxx         32      1001xxxxx
    [3RI.A]         11111000010xxxx         16      10111xxxx
    [3R.A]          11111000011xxxx         16      11000xxxx
    [3R.A]          111110001xxxxxx         64      000xxxxxx
    [3RI.B]         111110010xxxxxx         64      001xxxxxx

    [2R.A]          11111001100000xxxxxx    64      010xxxxxx
    [4R.B]          11111001100001xxxxxx    64      011xxxxxx

///
Instruction classes:

    MD(02) field can be:

        class A: (some of these might be redundant / nonsensical for some instructions)

            00: unsigned / logical operation.
            01: signed / arithmetic operation.
            10: unsigned / logical operation with inverted output.
            11: signed / arithmetic operation with inverted output.

        class B:

            00 8 bits.
            01 16 bits.
            10 32 bits.
            11 64 bits.

        class C:

            00: use SGPRB.
            01: use VGPRB.
            10: use HLPRB.
            11: use PERFCB.

        class D: 2 extra immediate bits (always most significant).

        class E:

            00: unmasked
            01: masked
            10: ~ maksed
            11: -

        class F:

            00 loads
            01 stores
            10 loads & stores
            11 fetch

        class G: extend register specifiers (usable in compressed formats only)

        class H:

            00   (a * b) + c
            01 - (a * b) + c
            10   (a * b) - c
            11 - (a * b) - c

///
Vector modes

    VMD(06):

        xxx000 unmasked v-v
        xxx001 unmasked v-s
        xxx010 masked v-v
        xxx011 masked v-s
        xxx100 ~ masked v-v
        xxx101 ~ masked v-s

    VMD(02):

        00: unmasked
        01: masked
        10: ~ masked
        11: -

///
INSTRUCTION LIST

[name]----------------------------------------------[mnemonic]---[format]-[class]

///..
basic scalar integer: OK

ABSOLUTE VALUE--------------------------------------ABS----------[2R.A]---[/]
SIGN EXTEND-----------------------------------------EXT----------[2R.A]---[B]

ADDITION--------------------------------------------ADD----------[3R.A]---[A]
SUBTRACTION-----------------------------------------SUB----------[3R.A]---[A]
MINIMUM---------------------------------------------MIN----------[3R.A]---[A]
MAXIMUM---------------------------------------------MAX----------[3R.A]---[A]
BITWISE AND-----------------------------------------AND----------[3R.A]---[A]
BITWISE OR------------------------------------------OR-----------[3R.A]---[A]
BITWISE XOR-----------------------------------------XOR----------[3R.A]---[A]
LEFT SHIFT------------------------------------------LSH----------[3R.A]---[A]
RIGHT SHIFT-----------------------------------------RSH----------[3R.A]---[A]
SET IF EQUAL----------------------------------------SEQ----------[3R.A]---[A]
SET IF LESS THAN------------------------------------SLT----------[3R.A]---[A]
SET IF LESS OR EQUAL--------------------------------SLE----------[3R.A]---[A]
CONDITIONAL MOVE------------------------------------CMV----------[3R.A]---[/]

LOAD IMMEDIATE--------------------------------------LDI----------[RI.A]---[D]
HIGH LOAD IMMEDIATE---------------------------------HLDI---------[RI.A]---[D]    // Ra = Ra << 16 | Imm;
ADD IMMEDIATE HIGH TO PC----------------------------ADDIHPC------[RI.A]---[D]    // Ra = PC + (Imm << 16);

ADDITION IMMEDIATE----------------------------------ADDI---------[2RI.A]--[A]
SUBTRACTION IMMEDIATE-------------------------------SUBI---------[2RI.A]--[A]
MINIMUM IMMEDIATE-----------------------------------MINI---------[2RI.A]--[A]
MAXIMUM IMMEDIATE-----------------------------------MAXI---------[2RI.A]--[A]
BITWISE AND IMMEDIATE-------------------------------ANDI---------[2RI.A]--[A]
BITWISE OR IMMEDIATE--------------------------------ORI----------[2RI.A]--[A]
BITWISE XOR IMMEDIATE-------------------------------XORI---------[2RI.A]--[A]
LEFT SHIFT IMMEDIATE--------------------------------LSHI---------[2RI.A]--[A]
RIGHT SHIFT IMMEDIATE-------------------------------RSHI---------[2RI.A]--[A]
SET IF EQUAL IMMEDIATE------------------------------SEQI---------[2RI.A]--[A]
SET IF LESS THAN IMMEDIATE--------------------------SLTI---------[2RI.A]--[A]
SET IF LESS OR EQUAL IMMEDIATE----------------------SLEI---------[2RI.A]--[A]
CONDITIONAL LOAD IMMEDIATE--------------------------CLDI---------[2RI.A]--[D]

///.
advanced scalar integer

COUNT ZEROS-----------------------------------------CZ-----------[2R.A]---[?]
COUNT LEADING ZEROS---------------------------------CLZ----------[2R.A]---[?]
COUNT TRAILING ZEROS--------------------------------CTZ----------[2R.A]---[?]
COUNT ONES------------------------------------------CO-----------[2R.A]---[?]
COUNT LEADING ONES----------------------------------CLO----------[2R.A]---[?]
COUNT TRAILING ONES---------------------------------CTO----------[2R.A]---[?]

MULTIPLICATION--------------------------------------MUL----------[3R.A]---[A]
HIGH MULTIPLICATION---------------------------------HMUL---------[3R.A]---[A]
DIVISION--------------------------------------------DIV----------[3R.A]---[A]
REMAINDER-------------------------------------------REM----------[3R.A]---[A]
LEFT ROTATE-----------------------------------------LRT----------[3R.A]---[A]
RIGHT ROTATE----------------------------------------RRT----------[3R.A]---[A]
BIT SWAP--------------------------------------------BSW----------[3R.A]---[A]
BIT REVERSE-----------------------------------------BRV----------[3R.A]---[A]
BIT FLIP--------------------------------------------BFL----------[3R.A]---[A]
CARRYLESS MULTIPLICATION----------------------------CLMUL--------[3R.A]---[A]

MULTIPLY ACCUMULATE---------------------------------MAC----------[4R.A]---[H]
MULTIPLY ACCUMULATE UNSIGNED------------------------MACU---------[4R.A]---[H]
PERMUTE---------------------------------------------PER----------[4R.A]---[A]

MULTIPLICATION IMMEDIATE----------------------------MULI---------[2RI.A]--[A]
HIGH MULTIPLICATION IMMEDIATE-----------------------HMULI--------[2RI.A]--[A]
DIVISION IMMEDIATE----------------------------------DIVI---------[2RI.A]--[A]
REMAINDER IMMEDIATE---------------------------------REMI---------[2RI.A]--[A]
LEFT ROTATE IMMEDIATE-------------------------------LRTI---------[2RI.A]--[A]
RIGHT ROTATE IMMEDIATE------------------------------RRTI---------[2RI.A]--[A]
BIT SWAP IMMEDIATE----------------------------------BSWI---------[2RI.A]--[A]
BIT REVERSE IMMEDIATE-------------------------------BRVI---------[2RI.A]--[A]
BIT FLIP IMMEDIATE----------------------------------BFLI---------[2RI.A]--[A]
CARRYLESS MULTIPLICATION IMMEDIATE------------------CLMULI-------[2RI.A]--[A]

MULTIPLY ACCUMULATE IMMEDIATE-----------------------MACI---------[3RI.A]--[H]
MULTIPLY ACCUMULATE IMMEDIATE UNSIGNED--------------MACIU--------[3RI.A]--[H]
PERMUTE IMMEDIATE-----------------------------------PERI---------[3RI.A]--[A]

///.
multiword

BIG ADDITION----------------------------------------BADD---------[4R.A]---[A]    // Ra = Rb + Rc + Rd; Rd = cout;
BIG SUBTRACTION-------------------------------------BSUB---------[4R.A]---[A]    // Ra = Rb - Rc - Rd; Rd = borrow;
BIG MULTIPLICATION----------------------------------BMUL---------[4R.A]---[A]
BIG DIVISION----------------------------------------BDIV---------[4R.A]---[A]
BIG REMAINDER---------------------------------------BREM---------[4R.A]---[A]
BIG LEFT SHIFT--------------------------------------BLSH---------[4R.A]---[A]
BIG RIGHT SHIFT-------------------------------------BRSH---------[4R.A]---[A]

///.
basic scalar fp

CAST FP. TO INTEGER---------------------------------CFI----------[2R.A]---[B]
CAST FP. TO INTEGER TRUNCATED-----------------------CFIT---------[2R.A]---[B]
CAST INTEGER TO FP.---------------------------------CIF----------[2R.A]---[B]
CAST FP. TO FP1.------------------------------------CFF1---------[2R.A]---[B]
CAST FP. TO FP2.------------------------------------CFF2---------[2R.A]---[B]
CAST FP. TO FP4.------------------------------------CFF4---------[2R.A]---[B]
CAST FP. TO FP8.------------------------------------CFF8---------[2R.A]---[B]

FP. ADDITION----------------------------------------FADD---------[3R.A]---[B]
FP. SUBTRACTION-------------------------------------FSUB---------[3R.A]---[B]
FP. MULTIPLICATION----------------------------------FMUL---------[3R.A]---[B]
FP. DIVISION----------------------------------------FDIV---------[3R.A]---[B]
FP. MINIMUM-----------------------------------------FMIN---------[3R.A]---[B]
FP. MAXIMUM-----------------------------------------FMAX---------[3R.A]---[B]
FP. SET IF LESS THAN--------------------------------FSLT---------[3R.A]---[B]
FP. SET IF LESS OR EQUAL----------------------------FSLE---------[3R.A]---[B]
FP. SET IF GREATER THAN-----------------------------FSGT---------[3R.A]---[B]
FP. SET IF GREATER OR EQUAL-------------------------FSGE---------[3R.A]---[B]

FP. MULTIPLY ADD------------------------------------FMADD--------[4R.A]---[B]
FP. NEGATIVE MULTIPLY ADD---------------------------FNMADD-------[4R.A]---[B]
FP. MULTIPLY SUBTRACT-------------------------------FMSUB--------[4R.A]---[B]
FP. NEGATIVE MULTIPLY SUBTRACT----------------------FNMSUB-------[4R.A]---[B]

FP. ADDITION IMMEDIATE------------------------------FADDI--------[2RI.A]--[B]
FP. SUBTRACTION IMMEDIATE---------------------------FSUBI--------[2RI.A]--[B]
FP. MULTIPLICATION IMMEDIATE------------------------FMULI--------[2RI.A]--[B]
FP. DIVISION IMMEDIATE------------------------------FDIVI--------[2RI.A]--[B]
FP. MINIMUM IMMEDIATE-------------------------------FMINI--------[2RI.A]--[B]
FP. MAXIMUM IMMEDIATE-------------------------------FMAXI--------[2RI.A]--[B]
FP. SET IF LESS THAN IMMEDIATE----------------------FSLTI--------[2RI.A]--[B]
FP. SET IF LESS OR EQUAL IMMEDIATE------------------FSLEI--------[2RI.A]--[B]
FP. SET IF GREATER THAN IMMEDIATE-------------------FSGTI--------[2RI.A]--[B]
FP. SET IF GREATER OR EQUAL IMMEDIATE---------------FSGEI--------[2RI.A]--[B]

FP. MULTIPLY ADD IMMEDIATE--------------------------FMADDI-------[3RI.A]--[B]
FP. NEGATIVE MULTIPLY ADD IMMEDIATE-----------------FNMADDI------[3RI.A]--[B]
FP. MULTIPLY SUBTRACT IMMEDIATE---------------------FMSUBI-------[3RI.A]--[B]
FP. NEGATIVE MULTIPLY SUBTRACT IMMEDIATE------------FNMSUBI------[3RI.A]--[B]

///.
advanced scalar fp

FP. SQUARE ROOT-------------------------------------FSQRT--------[2R.A]---[B]

///.
basic scalar memory

MEMORY LOAD-----------------------------------------MLD----------[2RI.A]--[B]
MEMORY LOAD UNSIGNED--------------------------------MLDU---------[2RI.A]--[B]
MEMORY STORE----------------------------------------MST----------[2RI.A]--[B]

///.
advanced scalar memory

// Addressing mode: Ra = mem(--Rb + imm);
MEMORY LOAD PRE DECREMENT---------------------------MLD_PRD------[2RI.A]--[B]
MEMORY LOAD UNSIGNED PRE DECREMENT------------------MLDU_PRD-----[2RI.A]--[B]
MEMORY STORE PRE DECREMENT--------------------------MST_PRD------[2RI.A]--[B]

// Addressing mode: Ra = mem(Rb++ + imm);
MEMORY LOAD POST INCREMENT--------------------------MLD_POI------[2RI.A]--[B]
MEMORY LOAD UNSIGNED POST INCREMENT-----------------MLDU_POI-----[2RI.A]--[B]
MEMORY STORE POST INCREMENT-------------------------MST_POI------[2RI.A]--[B]

// Addressing mode: Ra = mem((Rb + imm[0:16]) << imm[17:18])
MEMORY LOAD SCALED----------------------------------MLDS---------[2RI.B]--[B]
MEMORY LOAD SCALED UNSIGNED-------------------------MLDSU--------[2RI.B]--[B]
MEMORY STORE SCALED---------------------------------MSTS---------[2RI.B]--[B]

// Addressing mode: Ra = mem((--Rb + imm[0:16]) << imm[17:18])
MEMORY LOAD SCALED PRE DECREMENT--------------------MLDS_PRD-----[2RI.B]--[B]
MEMORY LOAD SCALED UNSIGNED PRE DECREMENT-----------MLDSU_PRD----[2RI.B]--[B]
MEMORY STORE SCALED PRE DECREMENT-------------------MSTS_PRD-----[2RI.B]--[B]

// Addressing mode: Ra = mem((Rb++ + imm[0:16]) << imm[17:18])
MEMORY LOAD SCALED POST INCREMENT-------------------MLDS_POI-----[2RI.B]--[B]
MEMORY LOAD SCALED UNSIGNED POST INCREMENT----------MLDSU_POI----[2RI.B]--[B]
MEMORY STORE SCALED POST INCREMENT------------------MSTS_POI-----[2RI.B]--[B]

///.
block memory

BLOCK LOAD LOWER------------------------------------BLDL---------[RI.A]---[C]
BLOCK LOAD UPPER------------------------------------BLDP---------[RI.A]---[C]
BLOCK STORE LOWER-----------------------------------BLDL---------[RI.A]---[C]
BLOCK STORE UPPER-----------------------------------BLDP---------[RI.A]---[C]

///.
basic integer control flow

UNCONDITIONAL JUMP----------------------------------JMP----------[I.A]----[/]
BIG JUMP AND LINK-----------------------------------BJAL---------[I.A]----[/]

UNCONDITIONAL JUMP REGISTER-------------------------JMPR---------[RI.A]---[D]
JUMP AND LINK---------------------------------------JAL----------[RI.A]---[D]

BRANCH IF EQUAL-------------------------------------BEQ----------[2RI.A]--[D]
BRANCH IF LESS THAN---------------------------------BLT----------[2RI.A]--[D]
BRANCH IF LESS THAN UNSIGNED------------------------BLTU---------[2RI.A]--[D]
BRANCH IF LESS THAN EQUAL---------------------------BLE----------[2RI.A]--[D]
BRANCH IF LESS THAN EQUAL UNSIGNED------------------BLEU---------[2RI.A]--[D]

///.
advanced integer control flow

BRANCH IF EQUAL IMMEDIATE---------------------------BEQI---------[RI.A]---[D]
BRANCH IF LESS THAN IMMEDIATE-----------------------BLTI---------[RI.A]---[D]
BRANCH IF LESS THAN IMMEDIATE UNSIGNED--------------BLTIU--------[RI.A]---[D]
BRANCH IF LESS THAN EQUAL IMMEDIATE-----------------BLEI---------[RI.A]---[D]
BRANCH IF LESS THAN EQUAL IMMEDIATE UNSIGNED--------BLEIU--------[RI.A]---[D]

///.
basic floating point control flow: OK

[name]----------------------------------------------[mnemonic]---[format]-[class]

FP. BRANCH IF LESS THAN-----------------------------FBLT---------[2RI.B]--[B]
FP. BRANCH IF LESS THAN EQUAL-----------------------FBLE---------[2RI.B]--[B]

///.
advanced floating point control flow:

FP. BRANCH IF LESS THAN IMMEDIATE-------------------FBLTI--------[RI.A]---[B]
FP. BRANCH IF LESS THAN EQUAL IMMEDIATE-------------FBLEI--------[RI.A]---[B]

///.
basic vector integer

VECTOR ABSOLUTE VALUE-------------------------------VABS---------[3R.A]---[E]

VECTOR ADDITION-------------------------------------VADD---------[4R.B]---[A]
VECTOR SUBTRACTION----------------------------------VSUB---------[4R.B]---[A]
VECTOR MINIMUM--------------------------------------VMIN---------[4R.B]---[A]
VECTOR MAXIMUM--------------------------------------VMAX---------[4R.B]---[A]
VECTOR BITWISE AND----------------------------------VAND---------[4R.B]---[A]
VECTOR BITWISE OR-----------------------------------VOR----------[4R.B]---[A]
VECTOR BITWISE XOR----------------------------------VXOR---------[4R.B]---[A]
VECTOR LEFT SHIFT-----------------------------------VLSH---------[4R.B]---[A]
VECTOR RIGHT SHIFT----------------------------------VRSH---------[4R.B]---[A]
VECTOR SET IF EQUAL---------------------------------VSEQ---------[4R.B]---[A]
VECTOR SET IF LESS THAN-----------------------------VSLT---------[4R.B]---[A]
VECTOR SET IF LESS OR EQUAL-------------------------VSLE---------[4R.B]---[A]
VECTOR EXTRACT--------------------------------------VEXTR--------[4R.B]---[B]    // Va[Rb] = Rc; (ignores the current VSH reg)
VECTOR INJECT---------------------------------------VINJ---------[4R.B]---[B]    // Ra = Vb[Rc]; (ignores the current VSH reg)

VECTOR ADDITION IMMEDIATE---------------------------VADDI--------[3RI.B]--[A]
VECTOR SUBTRACTION IMMEDIATE------------------------VSUBI--------[3RI.B]--[A]
VECTOR MINIMUM IMMEDIATE----------------------------VMINI--------[3RI.B]--[A]
VECTOR MAXIMUM IMMEDIATE----------------------------VMAXI--------[3RI.B]--[A]
VECTOR BITWISE AND IMMEDIATE------------------------VANDI--------[3RI.B]--[A]
VECTOR BITWISE OR IMMEDIATE-------------------------VORI---------[3RI.B]--[A]
VECTOR BITWISE XOR IMMEDIATE------------------------VXORI--------[3RI.B]--[A]
VECTOR LEFT SHIFT IMMEDIATE-------------------------VLSHI--------[3RI.B]--[A]
VECTOR RIGHT SHIFT IMMEDIATE------------------------VRSHI--------[3RI.B]--[A]
VECTOR SET IF EQUAL IMMEDIATE-----------------------VSEQI--------[3RI.B]--[A]
VECTOR SET IF LESS THAN IMMEDIATE-------------------VSLTI--------[3RI.B]--[A]
VECTOR SET IF LESS OR EQUAL IMMEDIATE---------------VSLEI--------[3RI.B]--[A]
VECTOR EXTRACT IMMEDIATE----------------------------VEXTRI-------[3RI.B]--[B]    // Va[imm] = Rc; (ignores the current VSH reg)
VECTOR INJECT IMMEDIATE-----------------------------VINJI--------[3RI.B]--[B]    // Ra = Vb[imm]; (ignores the current VSH reg)
VECTOR LOAD IMMEDIATE-------------------------------VLDI---------[3RI.B]--[D]    // Va = imm (broadcast)

///.
advanced vector integer

VECTOR COUNT ZEROS----------------------------------VCZ----------[3R.A]---[E]
VECTOR COUNT LEADING ZEROS--------------------------VCLZ---------[3R.A]---[E]
VECTOR COUNT TRAILING ZEROS-------------------------VCTZ---------[3R.A]---[E]
VECTOR COUNT ONES-----------------------------------VCO----------[3R.A]---[E]
VECTOR COUNT LEADING ONES---------------------------VCLO---------[3R.A]---[E]
VECTOR COUNT TRAILING ONES--------------------------VCTO---------[3R.A]---[E]

VECTOR MULTIPLICATION-------------------------------VMUL---------[4R.B]---[A]
VECTOR HIGH MULTIPLICATION--------------------------VHMUL--------[4R.B]---[A]
VECTOR DIVISION-------------------------------------VDIV---------[4R.B]---[A]
VECTOR REMAINDER------------------------------------VREM---------[4R.B]---[A]
VECTOR LEFT ROTATE----------------------------------VLRT---------[4R.B]---[A]
VECTOR RIGHT ROTATE---------------------------------VRRT---------[4R.B]---[A]
VECTOR BIT SWAP-------------------------------------VBSW---------[4R.B]---[A]
VECTOR BIT REVERSE----------------------------------VBRV---------[4R.B]---[A]
VECTOR BIT FLIP-------------------------------------VBFL---------[4R.B]---[A]
VECTOR CARRYLESS MULTIPLICATION---------------------VCMUL--------[4R.B]---[A]
VECTOR MULTIPLY ACCUMULATE--------------------------VMAC---------[4R.B]---[H]
VECTOR MULTIPLY ACCUMULATE UNSIGNED-----------------VMACU--------[4R.B]---[H]
VECTOR PERMUTE--------------------------------------VPER---------[4R.B]---[A]

VECTOR MULTIPLICATION IMMEDIATE---------------------VMULI--------[3RI.B]--[A]
VECTOR HIGH MULTIPLICATION IMMEDIATE----------------VHMULI-------[3RI.B]--[A]
VECTOR DIVISION IMMEDIATE---------------------------VDIVI--------[3RI.B]--[A]
VECTOR REMAINDER IMMEDIATE--------------------------VREMI--------[3RI.B]--[A]
VECTOR LEFT ROTATE IMMEDIATE------------------------VLRTI--------[3RI.B]--[A]
VECTOR RIGHT ROTATE IMMEDIATE-----------------------VRRTI--------[3RI.B]--[A]
VECTOR BIT SWAP IMMEDIATE---------------------------VBSWI--------[3RI.B]--[A]
VECTOR BIT REVERSE IMMEDIATE------------------------VBRVI--------[3RI.B]--[A]
VECTOR BIT FLIP IMMEDIATE---------------------------VBFLI--------[3RI.B]--[A]
VECTOR CARRYLESS MULTIPLICATION IMMEDIATE-----------VCMULI-------[3RI.B]--[A]
VECTOR MULTIPLY ACCUMULATE IMMEDIATE----------------VMACI--------[4R.B]---[H]
VECTOR MULTIPLY ACCUMULATE IMMEDIATE UNSIGNED-------VMACIU-------[4R.B]---[H]
VECTOR PERMUTE IMMEDIATE----------------------------VPERI--------[3RI.B]--[A]
VECTOR PACK UNPACK----------------------------------VPCKUPCK-----[3RI.B]--[A]    // Changes size but maintains number of elements.

pack unpack: aaaabbbbccccdddd <-> 000000000000abcd

///.
vector reductions
"REDUCED" means scalar = operation(vector)

REDUCED ADDITION------------------------------------RADD---------[3R.A]---[A]
REDUCED SUBTRACTION---------------------------------RSUB---------[3R.A]---[A]
REDUCED MINIMUM-------------------------------------RMIN---------[3R.A]---[A]
REDUCED MAXIMUM-------------------------------------RMAX---------[3R.A]---[A]
REDUCED BITWISE AND---------------------------------RAND---------[3R.A]---[A]
REDUCED BITWISE OR----------------------------------ROR----------[3R.A]---[A]
REDUCED BITWISE XOR---------------------------------RXOR---------[3R.A]---[A]

///.
basic vector floating point

VECTOR CAST FP. TO INTEGER--------------------------VCFI---------[3R.A]---[E]    // Preserves the shape.
VECTOR CAST FP. TO INTEGER TRUNCATED----------------VCFIT--------[3R.A]---[E]    // Preserves the shape.
VECTOR CAST INTEGER TO FP.--------------------------VCIF---------[3R.A]---[E]    // Preserves the shape.
CAST FP. TO FP. 1-----------------------------------VCFF1--------[3R.A]---[E]    // Doesn't preserve the shape.
CAST FP. TO FP. 2-----------------------------------VCFF2--------[3R.A]---[E]    // Doesn't preserve the shape.
CAST FP. TO FP. 4-----------------------------------VCFF4--------[3R.A]---[E]    // Doesn't preserve the shape.
CAST FP. TO FP. 8-----------------------------------VCFF8--------[3R.A]---[E]    // Doesn't preserve the shape.

VECTOR FP. ADDITION---------------------------------VFADD--------[4R.B]---[/]
VECTOR FP. SUBTRACTION------------------------------VFSUB--------[4R.B]---[/]
VECTOR FP. MULTIPLICATION---------------------------VFMUL--------[4R.B]---[/]
VECTOR FP. DIVISION---------------------------------VFDIV--------[4R.B]---[/]
VECTOR FP. MINIMUM----------------------------------VFMIN--------[4R.B]---[/]
VECTOR FP. MAXIMUM----------------------------------VFMAX--------[4R.B]---[/]
VECTOR FP. SET IF LESS THAN-------------------------VFSLT--------[4R.B]---[A]
VECTOR FP. SET IF LESS OR EQUAL---------------------VFSLE--------[4R.B]---[A]
VECTOR FP. MULTIPLY ACCUMULATE----------------------VFMAC--------[4R.B]---[H]

VECTOR FP. ADDITION IMMEDIATE-----------------------VFADDI-------[3RI.B]--[/]
VECTOR FP. SUBTRACTION IMMEDIATE--------------------VFSUBI-------[3RI.B]--[/]
VECTOR FP. MULTIPLICATION IMMEDIATE-----------------VFMULI-------[3RI.B]--[/]
VECTOR FP. DIVISION IMMEDIATE-----------------------VFDIVI-------[3RI.B]--[/]
VECTOR FP. MINIMUM IMMEDIATE------------------------VFMINI-------[3RI.B]--[/]
VECTOR FP. MAXIMUM IMMEDIATE------------------------VFMAXI-------[3RI.B]--[/]
VECTOR FP. SET IF LESS THAN IMMEDIATE---------------VFSLTI-------[3RI.B]--[A]
VECTOR FP. SET IF LESS OR EQUAL IMMEDIATE-----------VFSLEI-------[3RI.B]--[A]
VECTOR FP. MULTIPLY ACCUMULATE IMMEDIATE------------VFMACI-------[3RI.B]--[H]

///.
advanced vector floating point

VECTOR FP. SQUARE ROOT------------------------------VSQRT--------[3R.A]---[E]

///.
vector floating point reductions

REDUCED FP. ADDITION--------------------------------RFADD--------[3R.A]---[E]
REDUCED FP. SUBTRACTION-----------------------------RFSUB--------[3R.A]---[E]
REDUCED FP. MULTIPLICATION--------------------------RFMUL--------[3R.A]---[E]
REDUCED FP. DIVISION--------------------------------RFDIV--------[3R.A]---[E]
REDUCED FP. MINIMUM---------------------------------RFMIN--------[3R.A]---[E]
REDUCED FP. MAXIMUM---------------------------------RFMAX--------[3R.A]---[E]

///.
basic vector memory
// Addressing mode: Va = mem(Rb + stride(imm));

VECTOR MEMORY LOAD----------------------------------VMLD---------[3RI.B]--[D]
VECTOR MEMORY STORE---------------------------------VMST---------[3RI.B]--[D]

///.
advanced vector memory
// Addressing mode: Va_i = mem(Rb + Vc_i);

VECTOR GATHER---------------------------------------VGTR---------[4R.B]---[/]
VECTOR SCATTER--------------------------------------VSCR---------[4R.B]---[/]

///.
vector configuration

LOAD VECTOR CONFIGURATION---------------------------LDVCNF-------[2R.A]---[/]
STORE VECTOR CONFIGURATION--------------------------STVCNF-------[2R.A]---[/]

///.
compressed basic integer

COMPRESSED ADDITION---------------------------------CADD---------[2R.B]---[G]
COMPRESSED SUBTRACTION------------------------------CSUB---------[2R.B]---[G]
COMPRESSED MOVE-------------------------------------CMOV---------[2R.B]---[G]
COMPRESSED BITWISE AND------------------------------CAND---------[2R.B]---[G]
COMPRESSED LEFT SHIFT-------------------------------CLSH---------[2R.B]---[G]
COMPRESSED RIGHT SHIFT------------------------------CRSH---------[2R.B]---[G]

COMPRESSED ADDITION IMMEDIATE-----------------------CADDI--------[RI.B]---[/]
COMPRESSED BITWISE AND IMMEDIATE--------------------CANDI--------[RI.B]---[/]
COMPRESSED LEFT SHIFT IMMEDIATE---------------------CLSHI--------[RI.B]---[/]
COMPRESSED RIGHT SHIFT IMMEDIATE--------------------CRSHI--------[RI.B]---[/]
COMPRESSED LOAD IMMEDIATE---------------------------CLDI---------[RI.B]---[/]

///.
compressed data

COMPRESSED MEMORY LOAD------------------------------CMLD---------[2R.B]---[B]
COMPRESSED MEMORY STORE-----------------------------CMST---------[2R.B]---[B]

COMPRESSED LOAD INT OFFSET--------------------------CLIO---------[2RI.C]--[/]
COMPRESSED STORE INT OFFSET-------------------------CSIO---------[2RI.C]--[/]
COMPRESSED LOAD WORD OFFSET-------------------------CLWO---------[2RI.C]--[/]
COMPRESSED STORE WORD OFFSET------------------------CSWO---------[2RI.C]--[/]

///.
compressed flow

COMPRESSED BRANCH IF EQUAL TO ZERO------------------CBEQZ--------[RI.B]---[/]
COMPRESSED BRANCH IF LESS THAN ZERO-----------------CBLTZ--------[RI.B]---[/]
COMPRESSED BRANCH IF LESS OR EQUAL TO ZERO----------CBLEZ--------[RI.B]---[/]
COMPRESSED JUMP AND LINK OFFSET---------------------CJALO--------[RI.B]---[/]
COMPRESSED JUMP OFFSET------------------------------CJMPO--------[RI.B]---[/]

COMPRESSED JUMP AND LINK----------------------------CJAL---------[I.B]----[/]
COMPRESSED JUMP-------------------------------------CJMP---------[I.B]----[/]

///.
basic system

NO OPERATION----------------------------------------NOP----------[2R.A]---[/]    // Regs aren't used.
HALT EXECUTION--------------------------------------HLT----------[2R.A]---[/] *  // PWR = Ra; halt; (Rb isn't used)
SYSTEM INFORMATION----------------------------------SYSINFO------[2R.A]---[B]

SYSTEM INFORMATION IMMEDIATE------------------------SYSINFI------[RI.A]---[B]

CACHE OPERATION-------------------------------------CACOP--------[2RI.B]--[/] *  // INCI fault if no caches are implemented.

///.
eventing

EVENT RETURN----------------------------------------ERET---------[2R.A]---[/] *  // Perform eret; Ra = Rb; (machine -> machine)

///.
user mode

USER EVENT RETURN-----------------------------------UERET--------[2R.A]---[/]    // Perform eret; Ra = Rb; (user -> user)
USER RETURN-----------------------------------------URET---------[2R.A]---[/] *  // Perform eret; Ra = Rb;(machine -> user)

USER CACHE OPERATION--------------------------------UCACOP-------[2RI.B]--[/]    // INCI fault if no caches are implemented.

///.
advanced system

SYSTEM CALL-----------------------------------------SYSCL--------[2R.A]---[/] *  // Ra = call ID, Rb not used.

SYSTEM CALL IMMEDIATE-------------------------------SYSCLI-------[RI.A]---[/] *  // Imm = call ID, Ra not used.
WAIT FOR INTERRUPT----------------------------------WINT---------[RI.A]---[/] *  // Ra = timeout, Rb = int to wait for.
DUMP FILE-------------------------------------------DMP----------[RI.A]---[/] *
RESTORE FILE----------------------------------------RST----------[RI.A]---[/] *

MEMORY MANAGEMENT UNIT OPERATION--------------------MMUOP--------[2RI.B]--[/] *  // INCI fault if no MMU is implemented.

///.
helper registers

LOAD HELPER REGISTER--------------------------------LDHR---------[2R.A]---[B]
STORE HELPER REGISTER-------------------------------STHR---------[2R.A]---[B]
LOAD HELPER REGISTER MODE---------------------------LDHRM--------[2R.A]---[/]
STORE HELPER REGISTER MODE--------------------------STHRM--------[2R.A]---[/]

LOAD HELPER REGISTER IMMEDIATE----------------------LDHRI--------[RI.A]---[D]
LOAD HELPER REGISTER MODE IMMEDIATE-----------------LTHRMI-------[RI.A]---[/]

///.
performance counters

LOAD COUNTER REGISTER-------------------------------LDCR---------[2R.A]---[B]
STORE COUNTER REGISTER------------------------------STCR---------[2R.A]---[B]
LOAD COUNTER REGISTER MODE--------------------------LDCRM--------[2R.A]---[/]
STORE COUNTER REGISTER MODE-------------------------STCRM--------[2R.A]---[/]

LOAD COUNTER REGISTER IMMEDIATE---------------------LDCRI--------[RI.A]---[D]
LOAD COUNTER REGISTER MODE IMMEDIATE----------------LTCRMI-------[RI.A]---[/]

///.
fencing

FENCE-----------------------------------------------FNC----------[2R.A]---[F]    // The registers are not used.

///.
basic atomic memory

COMPARE AND SWAP------------------------------------CAS----------[3R.A]---[B]

///.
advanced atomic memory

ATOMIC ADD------------------------------------------AADD---------[3R.A]---[B]    // Always signed.
ATOMIC SUB------------------------------------------ASUB---------[3R.A]---[B]    // Always signed.
ATOMIC AND------------------------------------------AAND---------[3R.A]---[B]
ATOMIC OR-------------------------------------------AOR----------[3R.A]---[B]

VESRIONED COMPARE AND SWAP--------------------------VECAS--------[4R.A]---[B]

ATOMIC ADD IMMEDIATE--------------------------------AADDI--------[2RI.B]--[B]    // Always signed.
ATOMIC SUB IMMEDIATE--------------------------------ASUBI--------[2RI.B]--[B]    // Always signed.
ATOMIC AND IMMEDIATE--------------------------------AANDI--------[2RI.B]--[B]
ATOMIC OR IMMEDIATE---------------------------------AORI---------[2RI.B]--[B]

///.
transactional memory

TRANSACTION BEGIN-----------------------------------TBEG---------[2R.A]---[/]    // Ra = PC + Rb;
TRANSACTION COMMIT----------------------------------TCOM---------[2R.A]---[/]    // Ra = status code of failure, Rb not used.
TRANSACTION CHECK-----------------------------------TCHK---------[2R.A]---[/]    // Ra = status code of failure, Rb not used.
TRANSACTION ABORT-----------------------------------TABT---------[2R.A]---[/]    // Regs not used.
TRANSACTION ABORT ALL-------------------------------TABTA--------[2R.A]---[/]    // Regs not used.

///.
compressed section

///
