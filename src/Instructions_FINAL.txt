raw txt list of all the instructions


TODO: 

	1) assign formats for system instructions
	2) decide the compressed instructions
	3) assign the GODDAMN opcodes

instruction interpretation:

	[format] (mnemonic)--Name----------------------------------------------------OPCODE: xxxxxxxx

______________________________________________________________________________________________________________________________________________________________________

Computational { (118 total so far)
	
	Integer {

		Scalar {

			Basic { [31]

				[A] (ADD)----Addition--------------------------------------------OPCODE:
	            [A] (SUB)----Subtraction-----------------------------------------OPCODE:
	            [A] (AND)----Bitwise AND-----------------------------------------OPCODE:
	            [A] (NAND)---Bitwise NAND----------------------------------------OPCODE:
	            [A] (OR)-----Bitwise OR------------------------------------------OPCODE:
	            [A] (NOR)----Bitwise NOR-----------------------------------------OPCODE:
	            [A] (XOR)----Bitwise XOR-----------------------------------------OPCODE:
	            [A] (XNOR)---Bitwise XNOR----------------------------------------OPCODE:
	            [A] (ALSH)---Arithmetic Left Shift-------------------------------OPCODE:
	            [A] (ARSH)---Arithmetic Right Shift------------------------------OPCODE:
	            [A] (LLSH)---Logical Left Shift----------------------------------OPCODE:
	            [A] (LRSH)---Logical Right Shift---------------------------------OPCODE:

	            [B] (IADD)---Immediate Addition----------------------------------OPCODE:
	            [B] (ISUB)---Immediate Subtraction-------------------------------OPCODE:
	            [B] (IAND)---Immediate Bitwise AND-------------------------------OPCODE:
	            [B] (INAND)--Immediate Bitwise NAND------------------------------OPCODE:
	            [B] (IOR)----Immediate Bitwise OR--------------------------------OPCODE:
	            [B] (INOR)---Immediate Bitwise NOR-------------------------------OPCODE:
	            [B] (IXOR)---Immediate Bitwise XOR-------------------------------OPCODE:
	            [B] (IXNOR)--Immediate Bitwise XNOR------------------------------OPCODE:
	            [B] (IASH)---Immediate Arithmetic Shift--------------------------OPCODE:
	            [B] (ILSH)---Immediate Logical Shift-----------------------------OPCODE:
	            [B] (LIADD)--Long Immediate Addition-----------------------------OPCODE:
	            [B] (LISUB)--Long Immediate Subtraction--------------------------OPCODE:
	            [B] (LIAND)--Long Immediate Bitwise AND--------------------------OPCODE:
	            [B] (LINAND)-Long Immediate Bitwise NAND-------------------------OPCODE:
	            [B] (LIOR)---Long Immediate Bitwise OR---------------------------OPCODE:
	            [B] (LINOR)--Long Immediate Bitwise NOR--------------------------OPCODE:
	            [B] (LIXOR)--Long Immediate Bitwise XOR--------------------------OPCODE:
	            [B] (LIXNOR)-Long Immediate Bitwise XNOR-------------------------OPCODE:

	            [C] (IIC)----Integer-Integer Cast--------------------------------OPCODE:
			}

			Advanced { [37]

				[A] (MUL)----Multiplication--------------------------------------OPCODE:
	            [A] (MAC)----Multiply Accumulate---------------------------------OPCODE:
	            [A] (DIV)----Division--------------------------------------------OPCODE:
	            [A] (REM)----Remainder-------------------------------------------OPCODE:
	            [A] (IMP)----Bitwise IMP-----------------------------------------OPCODE:
	            [A] (NIMP)---Bitwise NIMP----------------------------------------OPCODE:
	            [A] (LRT)----Left Rotate-----------------------------------------OPCODE:
	            [A] (RRT)----Right Rotate----------------------------------------OPCODE:
	            [A] (SWP)----Bit Swap--------------------------------------------OPCODE:

	            [B] (IMUL)---Immediate Multiplication----------------------------OPCODE:
	            [B] (IMAC)---Immediate Multiply Accumulate-----------------------OPCODE:
	            [B] (IDIV)---Immediate Division----------------------------------OPCODE:
	            [B] (IREM)---Immediate Remainder---------------------------------OPCODE:
	            [B] (IIMP)---Immediate Bitwise IMP-------------------------------OPCODE:
	            [B] (INIMP)--Immediate Bitwise NIMP------------------------------OPCODE:
	            [B] (IRT)----Immediate Rotate------------------------------------OPCODE:
	            [B] (ISWP)---Immediate Bit Swap----------------------------------OPCODE:
	            [B] (LIMUL)--Long Immediate Multiplication-----------------------OPCODE:
	            [B] (LIMAC)--Long Immediate Multiply Accumulate------------------OPCODE:
	            [B] (LIDIV)--Long Immediate Division-----------------------------OPCODE:
	            [B] (LIREM)--Long Immediate Remainder----------------------------OPCODE:
	            [B] (LIIMP)--Long Immediate Bitwise IMP--------------------------OPCODE:
	            [B] (LINIMP)-Long Immediate Bitwise NIMP-------------------------OPCODE:

	            [C] (CTO)----Count Ones------------------------------------------OPCODE:
	            [C] (CTLO)---Count Leading Ones----------------------------------OPCODE:
	            [C] (CTTO)---Count Trailing Ones---------------------------------OPCODE:
	            [C] (CTZ)----Count Zeros-----------------------------------------OPCODE:
	            [C] (CTLZ)---Count Leading Zeros---------------------------------OPCODE:
	            [C] (CTTZ)---Count Trailing Zeros--------------------------------OPCODE:

	            [F] (MWADD)--Multiword Addition----------------------------------OPCODE:
	            [F] (MWSUB)--Multiword Subtraction-------------------------------OPCODE:
	            [F] (MWMUL)--Multiword Multiplication----------------------------OPCODE:
	            [F] (MWDIV)--Multiword Division----------------------------------OPCODE:
	            [F] (MALSH)--Multiword Arithmetic Left Shift---------------------OPCODE:
	            [F] (MARSH)--Multiword Arithmetic Right Shift--------------------OPCODE:
	            [F] (MLLSH)--Multiword Logical Left Shift------------------------OPCODE:
	            [F] (MLRSH)--Multiword Logical Right Shift-----------------------OPCODE:
			}
		}

		Vector {

			Integer {

				Basic {

					- requires V registers
					- requires VMSK register

					-> to implement: make the (integer scalar basic) capable of vector via mod
				}

				Advanced {

					- requires V registers
					- requires VMSK register

					-> to implement: make the (integer scalar advanced) capable of vector via mod
				}
			}
		}
	}

	Floating Point {

		Scalar {

			Basic { [15]

				[A] (FADD)---FP. Addition----------------------------------------OPCODE:
	            [A] (FSUB)---FP. Subtraction-------------------------------------OPCODE:
	            [A] (FMUL)---FP. Multiplication----------------------------------OPCODE:
	            [A] (FDIV)---FP. Division----------------------------------------OPCODE:

	            [B] (IFADD)--Immediate FP. Addition------------------------------OPCODE:
	            [B] (IFSUB)--Immediate FP. Subtraction---------------------------OPCODE:
	            [B] (IFMUL)--Immediate FP. Multiplication------------------------OPCODE:
	            [B] (IFDIV)--Immediate FP. Division------------------------------OPCODE:
	            [B] (ILFADD)-Long Immediate FP. Addition-------------------------OPCODE:
	            [B] (ILFSUB)-Long Immediate FP. Subtraction----------------------OPCODE:
	            [B] (ILFMUL)-Long Immediate FP. Multiplication-------------------OPCODE:
	            [B] (ILFDIV)-Long Immediate FP. Division-------------------------OPCODE:

	            [C] (FFC)----FP-FP Cast------------------------------------------OPCODE:
	            [C] (IFC)----Integer-FP Cast-------------------------------------OPCODE:
	    		[C] (FIC)----FP-Integer Cast-------------------------------------OPCODE:
			}

			Advanced { [13]

				[A] (FMAC)---FP. Multiply Accumulate-----------------------------OPCODE:
	            [A] (FPOW)---FP. Power-------------------------------------------OPCODE:
	            [A] (FPOW)---FP. Remainder---------------------------------------OPCODE:

	            [B] (IFMAC)--Immediate FP. Multiply Accumulate-------------------OPCODE:
	            [B] (IFPOW)--Immediate FP. Power---------------------------------OPCODE:
	            [B] (IFPOW)--Immediate FP. Remainder-----------------------------OPCODE:
	            [B] (ILFMAC)-Long Immediate FP. Multiply Accumulate--------------OPCODE:
	            [B] (ILFPOW)-Long Immediate FP. Power----------------------------OPCODE:
	            [B] (ILFPOW)-Long Immediate FP. Remainder------------------------OPCODE:

	            [C] (SIN)----Sin-------------------------------------------------OPCODE:
	            [C] (COS)----Cos-------------------------------------------------OPCODE:
	            [C] (ASIN)---Arcsin----------------------------------------------OPCODE:
	            [C] (ACOS)---Arccos----------------------------------------------OPCODE:
			}
		}

		Vector {

			Basic {

				- requires V registers
				- requires VMSK register

				-> to implement: make the (FP scalar basic) capable of vector via mod
			}

			Advanced {

				- requires V registers
				- requires VMSK register

				-> to implement: make the (FP scalar advanced) capable of vector via mod
			}
		}
	}

	Reduction { [22]

		- requires V registers
		- requires VMSK register

		[C] (RADD)----Reduced Addition------------------------------------OPCODE:
    	[C] (RSUB)----Reduced Subtraction---------------------------------OPCODE:
    	[C] (RMUL)----Reduced Multiplication------------------------------OPCODE:
    	[C] (RMAC)----Reduced Multiply Accumulate-------------------------OPCODE:
    	[C] (RDIV)----Reduced Division------------------------------------OPCODE:
    	[C] (RAND)----Reduced Bitwise AND---------------------------------OPCODE:
    	[C] (RNAND)---Reduced Bitwise NAND--------------------------------OPCODE:
    	[C] (ROR)-----Reduced Bitwise OR----------------------------------OPCODE:
    	[C] (RNOR)----Reduced Bitwise NOR---------------------------------OPCODE:
    	[C] (RXOR)----Reduced Bitwise XOR---------------------------------OPCODE:
    	[C] (RXNOR)---Reduced Bitwise XNOR--------------------------------OPCODE:
    	[C] (RIMP)----Reduced Bitwise IMP---------------------------------OPCODE:
    	[C] (RNIMP)---Reduced Bitwise NIMP--------------------------------OPCODE:

    	[C] (VSIN)----Vector Sin------------------------------------------OPCODE:
    	[C] (VCOS)----Vector Cos------------------------------------------OPCODE:
    	[C] (VASIN)---Vector Arcsin---------------------------------------OPCODE:
    	[C] (VACOS)---Vector Arccos---------------------------------------OPCODE:
    	[C] (VRFADD)--Vector Reduced FP. Addition-------------------------OPCODE:
    	[C] (VRFSUB)--Vector Reduced FP. Subtraction----------------------OPCODE:
    	[C] (VRFMUL)--Vector Reduced FP. Multiplication-------------------OPCODE:
    	[C] (VRFMAC)--Vector Reduced FP. Multiply Accumulate--------------OPCODE:
    	[C] (VRFDIV)--Vector Reduced FP. Division-------------------------OPCODE:
	}
}
______________________________________________________________________________________________________________________________________________________________________

Data transfer { (45 total so far)
	
	Scalar {

		Basic { [11]

			[D]   (MLD)---Memory Load----------------------------------------OPCODE:
            [D]   (MST)---Memory Store---------------------------------------OPCODE:
            [D.l] (LMLD)--Long Memory Load-----------------------------------OPCODE:
            [D.l] (LMST)--Long Memory Store----------------------------------OPCODE:

            [G]   (LDI)---Load Immediate-------------------------------------OPCODE:
            [G.l] (LLDI)--Long Load Immediate--------------------------------OPCODE:
            [G]   (ULDI)--Upper Load Immediate-------------------------------OPCODE:
            [G.l] (LULDI)-Long Upper Load Immediate--------------------------OPCODE:

            [C]   (MOV)----Move----------------------------------------------OPCODE:
    		[C]   (MOVTS)--Move To Special-----------------------------------OPCODE:
    		[C]   (MOVFS)--Move From Special---------------------------------OPCODE:
		}

		Advanced { [9]

			[E]   (IMLD)---Indexed Memory Load-------------------------------OPCODE:
            [E]   (IMST)---Indexed Memory Store------------------------------OPCODE:
            [E.l] (LIMLD)--Long Indexed Memory Load--------------------------OPCODE:
            [E.l] (LIMST)--Long Indexed Memory Store-------------------------OPCODE:

            [F]   (RIMLD)--Register Indexed Memory Load----------------------OPCODE:
            [F]   (RIMST)--Register Indexed Memory Store---------------------OPCODE:

            [C]   (SWP)----Swap----------------------------------------------OPCODE:
            [C]   (SWPTS)--Swap To Special-----------------------------------OPCODE:
            [C]   (SWPFS)--Swap From Special---------------------------------OPCODE:
		}
	}

	Vector {

		- requires V registers
		- requires VMSK register

		Basic { [7]

			[D]   (VMLD)---Vector Memory Load--------------------------------OPCODE:
            [D]   (VMST)---Vector Memory Store-------------------------------OPCODE:
            [D.l] (LVMLD)--Long Vector Memory Load---------------------------OPCODE:
            [D.l] (LVMST)--Long Vector Memory Store--------------------------OPCODE:

            [C]   (VMOV)---Vector Move---------------------------------------OPCODE:
    		[C]   (MOVTV)--Move To Vector------------------------------------OPCODE:
    		[C]   (MOVFV)--Move From Vector----------------------------------OPCODE:
		}

		Advanced { [11]

			[E]   (VIMLD)---Vector Indexed Memory Load-----------------------OPCODE:
            [E]   (VIMST)---Vector Indexed Memory Store----------------------OPCODE:
            [E.l] (LVIMLD)--Long Vector Indexed Memory Load------------------OPCODE:
            [E.l] (LVIMST)--Long Vector Indexed Memory Store-----------------OPCODE:

            [A]   (VGAT)---Vector Gather-------------------------------------OPCODE:
            [A]   (VSCA)---Vector Scatter------------------------------------OPCODE:

            [F]   (VRIMLD)--Vector Register Indexed Memory Load--------------OPCODE:
            [F]   (VRIMST)--Vector Register Indexed Memory Store-------------OPCODE:

            [C]   (VSWP)---Vector Swap---------------------------------------OPCODE:
            [C]   (SWPTV)--Swap To Vector------------------------------------OPCODE:
            [C]   (SWPFV)--Swap From Vector----------------------------------OPCODE:
		}
	}

	Atomic { [3]

		[A] (LL)--Load Linked------------------------------------------------OPCODE:
        [A] (SC)--Store Conditional------------------------------------------OPCODE:
        [A] (CAS)-Compare And Swap-------------------------------------------OPCODE:
	}

	Block { [4]

		[G]   (BLD)--Block Load----------------------------------------------OPCODE:
        [G]   (BST)--Block Store---------------------------------------------OPCODE:
        [G.l] (LBLD)-Long Block Load-----------------------------------------OPCODE:
        [G.l] (LBST)-Long Block Store----------------------------------------OPCODE:
	}
}
______________________________________________________________________________________________________________________________________________________________________

Flow transfer { (24 in total so far)
	
	Scalar {

		Integer {

			Basic { [8]

				[D]   (BEQ)---Branch If Equal--------------------------------------OPCODE:
            	[D]   (BNE)---Branch If Not Equal----------------------------------OPCODE:
            	[D]   (BLT)---Branch If Less Than----------------------------------OPCODE:
            	[D]   (BLE)---Branch If Less Equal---------------------------------OPCODE:
            	[D.l] (LCB)---Long Compare Branch----------------------------------OPCODE:

            	[D]   (CAL)---Function Call----------------------------------------OPCODE:
				[D.l] (LCAL)--Long Function Call-----------------------------------OPCODE:

				[K]   (RET)---Function Return--------------------------------------OPCODE:
			}

			Advanced { [4]

				[G]   (BTST)--Branch If Test---------------------------------------OPCODE:
				[G.l] (LBTST)-Long Branch If Test----------------------------------OPCODE:

				[D]   (RCAL)--Register Function Call-------------------------------OPCODE:
				[D.l] (LRCAL)-Long Register Function Call--------------------------OPCODE:
			}

			Mask { [2]

            	[C]   (ISMSKC)-Integer Scalar Mask Set on Compare------------------OPCODE:
            	[K]   (ISMSKT)-Integer Scalar Mask Set on Test---------------------OPCODE:
			}
		}

		Floating point {

			Basic {

				-> to implement: make the (integer basic) capable of FP via mod
			}

			Advanced {

				-> to implement: make the (integer advanced) capable of FP via mod
			}

			Mask { [2]

				[C]   (FSMSKC)-FP Scalar Mask Set on Compare------------------OPCODE:
            	[K]   (FSMSKT)-FP Scalar Mask Set on Test---------------------OPCODE:
			}
		}
	}

	Vector {

		Integer { [4]

			[C]   (VVIMSKC)-Vector-Vector Integer Mask Set on Compare------------------OPCODE:
            [C]   (VSIMSKC)-Vector-Scalar Integer Mask Set on Compare------------------OPCODE:
			[K]   (VVFMSKT)-Vector-Vector Integer Mask Set on Test---------------------OPCODE:
            [K]   (VSFMSKT)-Vector-Scalar Integer Mask Set on Test---------------------OPCODE:
		}

		Floating point { [4]

			[C]   (VVFMSKC)-Vector-Vector FP Mask Set on Compare------------------OPCODE:
            [C]   (VSFMSKC)-Vector-Scalar FP Mask Set on Compare------------------OPCODE:
			[K]   (VVFMSKT)-Vector-Vector FP Mask Set on Test----------------------OPCODE:
            [K]   (VSFMSKT)-Vector-Scalar FP Mask Set on Test----------------------OPCODE:
		}
	}
}
______________________________________________________________________________________________________________________________________________________________________

System { (16 in total so far)
	
	basic {

        [?] (NOP)---No Operation---------------------------------------------OPCODE:
      * [?] (CACOP)-Cache Operation------------------------------------------OPCODE:
        [?] (BPTRG)-Breakpoint Trigger---------------------------------------OPCODE:
    }

    fences {

        [?] (FNCL)--Fence Loads----------------------------------------------OPCODE:
        [?] (FNCS)--Fence Stores---------------------------------------------OPCODE:
        [?] (FNCLS)-Fence Loads and Stores-----------------------------------OPCODE:
    }

    transactional memory {

        [?] (TBEG)--Transaction Begin----------------------------------------OPCODE:
        [?] (TEND)--Transaction End------------------------------------------OPCODE:
        [?] (TABT)--Transaction Abort----------------------------------------OPCODE:
        [?] (TCHK)--Transaction Check----------------------------------------OPCODE:
    }

    advanced {

      * [?] (ERET)--Event Return---------------------------------------------OPCODE:
      * [?] (MMUOP)-MMU Operation--------------------------------------------OPCODE:

        [?] (SYSCL)-System Call----------------------------------------------OPCODE:
      * [?] (WINT)--Wait For Interrupt---------------------------------------OPCODE:

      * [?] (SDMP)--State Dump-----------------------------------------------OPCODE:
      * [?] (SRST)--State Restore--------------------------------------------OPCODE:
    }
}
______________________________________________________________________________________________________________________________________________________________________

Compressed {
	
	...
}
______________________________________________________________________________________________________________________________________________________________________