[A]   |OPCODE(07)|MOD(05)|RA(05)|RB(05) |RC(05) |RD(05)| 			r,r,r,r
[B]   |OPCODE(12)|MOD(04)|RA(05)|RB(05) |RC(05) | 					r,r,r
[C]   |OPCODE(16)|MOD(06)|RA(05)|RB(05) | 							r,r

[D]   |OPCODE(07)|MOD(03)|RA(05)|RB(05) |RC(05) |IMM(07)| 			r,r,r,i
[D.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05) |RC(05) |IMM(21)| 			r,r,r,i

[E]   |OPCODE(07)|MOD(05)|RA(05)|RB(05) |IMM(10)| 					r,r,i
[E.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05) |IMM(26)| 					r,r,i

[F]   |OPCODE(07)|MOD(04)|RA(05)|IMM(16)| 							r,i
[F.l] |OPCODE(07)|MOD(04)|RA(05)|IMM(32)| 							r,i

[G]   |OPCODE(07)|MOD(03)|RD/RS1(03)|RS2(03)| 						r,r
[H]   |OPCODE(11)|RS(05) |      									r

[I]   |OPCODE(07)|RA(03) |IMM(06)| 									r,i
[J]   |OPCODE(07)|IMM(09)| 											i

[K]   |OPCODE(16)| 													-
______________________________________________________________________________________________________________________________________________________________________

0000000xxxxxxxxx -> 1111011xxxxxxxxx 		124
11111000000xxxxx -> 11111001111xxxxx 		 16
111110100000xxxx -> 111111011111xxxx 		 64
1111111000000000 -> 1111111001111111 		128

384 combinations left
______________________________________________________________________________________________________________________________________________________________________

[A] format {
	
	[A]   |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|RD(05)|    length: 4B

	scalar load & store instructions:

        MOD(05): "ttmuu"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)

    vector load & store instructions:

        MOD(05): "mauu-"

        ('m' is mask: 0 unmasked, 1 masked)
        ('a' is addressing mode: 0 standard, 1 striding)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)
}
______________________________________________________________________________________________________________________________________________________________________

[B] format {
	
	[B]   |OPCODE(12)|MOD(04)|RA(05)|RB(05)|RC(05)|    length: 4B

	computational [R-R-R] instructions:

        MOD(05): "ttmvv"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('vv' is vector mode: 00 scalar, 01 vector-vector, 10 vector-scalar)

    vector gather & scatter instructions:

        MOD(05): "ttm--"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)

    atomic CAS instructions:

        MOD(05): "ttmcc"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('cc' is condition to perform: 00 EQ, 01 NE, 10 LT, 11 LE)
}
______________________________________________________________________________________________________________________________________________________________________

[C] format {
	
	[C]   |OPCODE(16)|MOD(06)|RA(05)|RB(05)|    length: 4B

	computational [R-R] instructions:
    
        MOD(06): "ttm--v"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('v' is vector mode: 0 scalar, 1 vector)

    computational reduction instructions:

        MOD(06): "ttm--d":

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('d' is direction for non commutative operations)

    casts & conversion instructions:
    
        MOD(06): "ttm-tt"

        ('tt', 'tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)

    move & swap instructions:

        MOD(06): "ttmnnn"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('nnn' is number of regs acted)

    compare mask setting instructions:
    
        MOD(06): "ttm-cc"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('cc' is condition: 00 EQ, 01 NE, 10 LT, 11 LE)
}
______________________________________________________________________________________________________________________________________________________________________

[D] format {
	
	[D]   |OPCODE(07)|MOD(03)|RA(05)|RB(05)|RC(05)|IMM(07)|    length: 4B
	[D.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|RC(05)|IMM(21)|    length: 6B

	scalar load & store instructions:

        MOD(03): "ttm"
        MOD(05): "ttmuu"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)

    vector load & store instructions:

        MOD(03): "ma-"
        MOD(05): "mauu-"

        ('m' is mask: 0 unmasked, 1 masked)
        ('a' is addressing mode: 0 standard, 1 striding)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)
}
______________________________________________________________________________________________________________________________________________________________________

[E] format {
	
	[E]   |OPCODE(07)|MOD(05)|RA(05)|RB(05)|IMM(10)|    length: 4B
	[E.l] |OPCODE(07)|MOD(05)|RA(05)|RB(05)|IMM(26)|    length: 6B


	computational [R-R-I] instructions:

        [E, E.l] MOD(05): "ttmvo"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is mask: 0 unmasked, 1 masked)
        ('v' is vector mode: 0 scalar, 1 vector-scalar)
        ('o' is extra opcode bit)

	scalar load & store instructions:

        [E]   MOD(05): "ttmii"
        [E.l] MOD(05): "ttmuu"

        ('tt' is data type length: 8, 16, 32, 64)
        ('m' is maks: 0 unmasked, 1 masked)
        ('i' is extra immediate)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)

    vector load & store instructions:

        [E]   MOD(05): "ma-ii"
        [E.l] MOD(05): "mauu-"

        ('m' is mask: 0 unmasked, 1 masked)
        ('a' is addressing mode: 0 standard, 1 striding)
        ('i' is extra immediate)
        ('uu' is update mode: 00 nothing, 01 post-inc, 10 post-dec, 11 pre-dec)

    conditional compare branches:

        [E]   MOD(05): "ttpii"
        [E.l] MOD(05): "ttpcc"

        ('tt' is data type length: 8, 16, 32, 64)
        ('cc' is condition: 00 EQ, 01 NE, 10 LT, 11 LE)
        ('p' is floating point mode)
        ('i' is extra immediate)

    indirect function calls & jumps:

    	[E]   MOD(05): "iiiii"
    	[E.l] MOD(05): "iiiii"

    	('i' extra immediate)
}
______________________________________________________________________________________________________________________________________________________________________

[F] format {
	
	[F]   |OPCODE(07)|MOD(04)|RA(05)|IMM(16)|    length: 4B
	[F.l] |OPCODE(07)|MOD(04)|RA(05)|IMM(32)|    length: 6B

	block load & store instructions:
    
        MOD(04): "ffm-"

        ('ff' is file selector: 00 SGPRs, 01 SPRs, 10 VGPRs)
        ('m' is mask: 0 unmasked, 1 masked)

    test branches:

        MOD(04): "ttff"

        ('tt' is data type length: 8, 16, 32, 64)
        ('ff' is condition: 00 EQZ, 01 NEZ, 10 LTZ, 11 LEZ)

    direct function calls & jumps:

    	MOD(04): "iiii"

    	('i' is extra immediate)

    bit-field manipulations:

        MOD(04): "ttmc"

        ('m' is mask: 0 unmasked, 1 masked)
        ('tt' is data type length: 8, 16, 32, 64)
        ('c' ...)
}
______________________________________________________________________________________________________________________________________________________________________

[G] format {
	
	[G]   |OPCODE(07)|MOD(03)|RD/RS1(03)|RS2(03)|    length: 2B

	compressed computational [R-R] instructions:

        MOD(02): "ttp"

        ('tt' is data type length: 8, 16, 32, 64)
        ('p' is for floating point mode)
}
______________________________________________________________________________________________________________________________________________________________________

[H] format {
	
	[H]   |OPCODE(11)|RS(05)|    length: 2B
}
______________________________________________________________________________________________________________________________________________________________________

[I] format {
	
	[I]   |OPCODE(07)|RA(03)|IMM(06)|    length: 2B
}
______________________________________________________________________________________________________________________________________________________________________

[J] format {
	
	[J]   |OPCODE(07)|IMM(09)|    length: 2B
}
______________________________________________________________________________________________________________________________________________________________________

[K] format {
	
	|OPCODE(16)|    length: 2B
}
______________________________________________________________________________________________________________________________________________________________________